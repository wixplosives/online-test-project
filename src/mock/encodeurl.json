{
  "packageName": "encodeurl",
  "packageVersion": "1.0.2",
  "request": "encodeurl",
  "resolved": "index.js",
  "files": {
    "index.js": "/*!\n * encodeurl\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = encodeUrl\n\n/**\n * RegExp to match non-URL code points, *after* encoding (i.e. not including \"%\")\n * and including invalid escape sequences.\n * @private\n */\n\nvar ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g\n\n/**\n * RegExp to match unmatched surrogate pair.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g\n\n/**\n * String to replace unmatched surrogate pair with.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2'\n\n/**\n * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\n *\n * This function will take an already-encoded URL and encode all the non-URL\n * code points. This function will not encode the \"%\" character unless it is\n * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\n * be encoded as `%25foo`).\n *\n * This encode is meant to be \"safe\" and does not throw errors. It will try as\n * hard as it can to properly encode the given URL, including replacing any raw,\n * unpaired surrogate pairs with the Unicode replacement character prior to\n * encoding.\n *\n * @param {string} url\n * @return {string}\n * @public\n */\n\nfunction encodeUrl (url) {\n  return String(url)\n    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)\n    .replace(ENCODE_CHARS_REGEXP, encodeURI)\n}\n",
    "package.json": "{\n  \"name\": \"encodeurl\",\n  \"description\": \"Encode a URL to a percent-encoded form, excluding already-encoded sequences\",\n  \"version\": \"1.0.2\",\n  \"contributors\": [\n    \"Douglas Christopher Wilson <doug@somethingdoug.com>\"\n  ],\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"encode\",\n    \"encodeurl\",\n    \"url\"\n  ],\n  \"repository\": \"pillarjs/encodeurl\",\n  \"devDependencies\": {\n    \"eslint\": \"3.19.0\",\n    \"eslint-config-standard\": \"10.2.1\",\n    \"eslint-plugin-import\": \"2.8.0\",\n    \"eslint-plugin-node\": \"5.2.1\",\n    \"eslint-plugin-promise\": \"3.6.0\",\n    \"eslint-plugin-standard\": \"3.0.1\",\n    \"istanbul\": \"0.4.5\",\n    \"mocha\": \"2.5.3\"\n  },\n  \"files\": [\n    \"LICENSE\",\n    \"HISTORY.md\",\n    \"README.md\",\n    \"index.js\"\n  ],\n  \"engines\": {\n    \"node\": \">= 0.8\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"test\": \"mocha --reporter spec --bail --check-leaks test/\",\n    \"test-cov\": \"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/\",\n    \"test-travis\": \"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/\"\n  }\n}\n"
  },
  "externals": []
}
