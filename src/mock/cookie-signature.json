{
  "packageName": "cookie-signature",
  "packageVersion": "1.0.6",
  "request": "cookie-signature",
  "resolved": "index.js",
  "files": {
    "index.js": "/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto');\n\n/**\n * Sign the given `val` with `secret`.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String}\n * @api private\n */\n\nexports.sign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto\n    .createHmac('sha256', secret)\n    .update(val)\n    .digest('base64')\n    .replace(/\\=+$/, '');\n};\n\n/**\n * Unsign and decode the given `val` with `secret`,\n * returning `false` if the signature is invalid.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String|Boolean}\n * @api private\n */\n\nexports.unsign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.'))\n    , mac = exports.sign(str, secret);\n  \n  return sha1(mac) == sha1(val) ? str : false;\n};\n\n/**\n * Private\n */\n\nfunction sha1(str){\n  return crypto.createHash('sha1').update(str).digest('hex');\n}\n",
    "package.json": "{\n  \"name\": \"cookie-signature\",\n  \"version\": \"1.0.6\",\n  \"description\": \"Sign and unsign cookies\",\n  \"keywords\": [\"cookie\", \"sign\", \"unsign\"],\n  \"author\": \"TJ Holowaychuk <tj@learnboost.com>\",\n  \"license\": \"MIT\",\n  \"repository\": { \"type\": \"git\", \"url\": \"https://github.com/visionmedia/node-cookie-signature.git\"},\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"mocha\": \"*\",\n    \"should\": \"*\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha --require should --reporter spec\"\n  },\n  \"main\": \"index\"\n}\n"
  },
  "externals": [
    "crypto"
  ]
}
