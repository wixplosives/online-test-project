{
  "packageName": "cosmiconfig",
  "packageVersion": "8.3.6",
  "request": "cosmiconfig",
  "resolved": "dist/index.js",
  "files": {
    "dist/index.js": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cosmiconfigSync = exports.cosmiconfig = exports.defaultLoadersSync = exports.defaultLoaders = exports.metaSearchPlaces = void 0;\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n__exportStar(require(\"./types.js\"), exports);\nconst os_1 = __importDefault(require(\"os\"));\nconst Explorer_js_1 = require(\"./Explorer.js\");\nconst ExplorerSync_js_1 = require(\"./ExplorerSync.js\");\nconst loaders_js_1 = require(\"./loaders.js\");\nconst util_1 = require(\"./util\");\n// this needs to be hardcoded, as this is intended for end users, who can't supply options at this point\nexports.metaSearchPlaces = [\n    'package.json',\n    '.config.json',\n    '.config.yaml',\n    '.config.yml',\n    '.config.js',\n    '.config.ts',\n    '.config.cjs',\n    '.config.mjs',\n];\n// do not allow mutation of default loaders. Make sure it is set inside options\nexports.defaultLoaders = Object.freeze({\n    '.mjs': loaders_js_1.loadJs,\n    '.cjs': loaders_js_1.loadJs,\n    '.js': loaders_js_1.loadJs,\n    '.ts': loaders_js_1.loadTs,\n    '.json': loaders_js_1.loadJson,\n    '.yaml': loaders_js_1.loadYaml,\n    '.yml': loaders_js_1.loadYaml,\n    noExt: loaders_js_1.loadYaml,\n});\nexports.defaultLoadersSync = Object.freeze({\n    '.cjs': loaders_js_1.loadJsSync,\n    '.js': loaders_js_1.loadJsSync,\n    '.ts': loaders_js_1.loadTsSync,\n    '.json': loaders_js_1.loadJson,\n    '.yaml': loaders_js_1.loadYaml,\n    '.yml': loaders_js_1.loadYaml,\n    noExt: loaders_js_1.loadYaml,\n});\nconst identity = function identity(x) {\n    return x;\n};\nfunction getInternalOptions(moduleName, options) {\n    const metaExplorer = new ExplorerSync_js_1.ExplorerSync({\n        packageProp: 'cosmiconfig',\n        stopDir: process.cwd(),\n        searchPlaces: exports.metaSearchPlaces,\n        ignoreEmptySearchPlaces: false,\n        applyPackagePropertyPathToConfiguration: true,\n        loaders: exports.defaultLoaders,\n        transform: identity,\n        cache: true,\n        metaConfigFilePath: null,\n    });\n    const metaConfig = metaExplorer.search();\n    if (!metaConfig) {\n        return options;\n    }\n    if (metaConfig.config?.loaders) {\n        throw new Error('Can not specify loaders in meta config file');\n    }\n    const overrideOptions = metaConfig.config ?? {};\n    if (overrideOptions.searchPlaces) {\n        overrideOptions.searchPlaces = overrideOptions.searchPlaces.map((path) => path.replace('{name}', moduleName));\n    }\n    overrideOptions.metaConfigFilePath = metaConfig.filepath;\n    return { ...options, ...(0, util_1.removeUndefinedValuesFromObject)(overrideOptions) };\n}\nfunction normalizeOptions(moduleName, options) {\n    const defaults = {\n        packageProp: moduleName,\n        searchPlaces: [\n            'package.json',\n            `.${moduleName}rc`,\n            `.${moduleName}rc.json`,\n            `.${moduleName}rc.yaml`,\n            `.${moduleName}rc.yml`,\n            `.${moduleName}rc.js`,\n            `.${moduleName}rc.ts`,\n            `.${moduleName}rc.cjs`,\n            `.${moduleName}rc.mjs`,\n            `.config/${moduleName}rc`,\n            `.config/${moduleName}rc.json`,\n            `.config/${moduleName}rc.yaml`,\n            `.config/${moduleName}rc.yml`,\n            `.config/${moduleName}rc.js`,\n            `.config/${moduleName}rc.ts`,\n            `.config/${moduleName}rc.cjs`,\n            `.config/${moduleName}rc.mjs`,\n            `${moduleName}.config.js`,\n            `${moduleName}.config.ts`,\n            `${moduleName}.config.cjs`,\n            `${moduleName}.config.mjs`,\n        ],\n        ignoreEmptySearchPlaces: true,\n        stopDir: os_1.default.homedir(),\n        cache: true,\n        transform: identity,\n        loaders: exports.defaultLoaders,\n        metaConfigFilePath: null,\n    };\n    return {\n        ...defaults,\n        ...(0, util_1.removeUndefinedValuesFromObject)(options),\n        loaders: {\n            ...defaults.loaders,\n            ...options.loaders,\n        },\n    };\n}\nfunction normalizeOptionsSync(moduleName, options) {\n    const defaults = {\n        packageProp: moduleName,\n        searchPlaces: [\n            'package.json',\n            `.${moduleName}rc`,\n            `.${moduleName}rc.json`,\n            `.${moduleName}rc.yaml`,\n            `.${moduleName}rc.yml`,\n            `.${moduleName}rc.js`,\n            `.${moduleName}rc.ts`,\n            `.${moduleName}rc.cjs`,\n            `.config/${moduleName}rc`,\n            `.config/${moduleName}rc.json`,\n            `.config/${moduleName}rc.yaml`,\n            `.config/${moduleName}rc.yml`,\n            `.config/${moduleName}rc.js`,\n            `.config/${moduleName}rc.ts`,\n            `.config/${moduleName}rc.cjs`,\n            `${moduleName}.config.js`,\n            `${moduleName}.config.ts`,\n            `${moduleName}.config.cjs`,\n        ],\n        ignoreEmptySearchPlaces: true,\n        stopDir: os_1.default.homedir(),\n        cache: true,\n        transform: identity,\n        loaders: exports.defaultLoadersSync,\n        metaConfigFilePath: null,\n    };\n    return {\n        ...defaults,\n        ...(0, util_1.removeUndefinedValuesFromObject)(options),\n        loaders: {\n            ...defaults.loaders,\n            ...options.loaders,\n        },\n    };\n}\nfunction cosmiconfig(moduleName, options = {}) {\n    const internalOptions = getInternalOptions(moduleName, options);\n    const normalizedOptions = normalizeOptions(moduleName, internalOptions);\n    const explorer = new Explorer_js_1.Explorer(normalizedOptions);\n    return {\n        search: explorer.search.bind(explorer),\n        load: explorer.load.bind(explorer),\n        clearLoadCache: explorer.clearLoadCache.bind(explorer),\n        clearSearchCache: explorer.clearSearchCache.bind(explorer),\n        clearCaches: explorer.clearCaches.bind(explorer),\n    };\n}\nexports.cosmiconfig = cosmiconfig;\nfunction cosmiconfigSync(moduleName, options = {}) {\n    const internalOptions = getInternalOptions(moduleName, options);\n    const normalizedOptions = normalizeOptionsSync(moduleName, internalOptions);\n    const explorerSync = new ExplorerSync_js_1.ExplorerSync(normalizedOptions);\n    return {\n        search: explorerSync.search.bind(explorerSync),\n        load: explorerSync.load.bind(explorerSync),\n        clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n        clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n        clearCaches: explorerSync.clearCaches.bind(explorerSync),\n    };\n}\nexports.cosmiconfigSync = cosmiconfigSync;\n//# sourceMappingURL=index.js.map",
    "package.json": "{\n  \"name\": \"cosmiconfig\",\n  \"version\": \"8.3.6\",\n  \"description\": \"Find and load configuration from a package.json property, rc file, TypeScript module, and more!\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"clean\": \"git clean -Xdf -e '!node_modules' .\",\n    \"build\": \"npm run build:tsc\",\n    \"build:tsc\": \"cross-env NODE_ENV=production tsc -b\",\n    \"dev\": \"npm run build:tsc -- --watch\",\n    \"lint\": \"eslint --ext .js,.ts .\",\n    \"lint:fix\": \"eslint --ext .js,.ts . --fix\",\n    \"lint:md\": \"remark-preset-davidtheclark\",\n    \"format\": \"prettier \\\"**/*.{js,ts,json,yml,yaml}\\\" --write\",\n    \"format:md\": \"remark-preset-davidtheclark --format\",\n    \"format:check\": \"prettier \\\"**/*.{js,ts,json,yml,yaml}\\\" --check\",\n    \"test\": \"vitest run --coverage\",\n    \"test:watch\": \"vitest\",\n    \"check:all\": \"npm run test && npm run lint && npm run format:check\",\n    \"prepublishOnly\": \"npm run check:all && npm run build\",\n    \"prepare\": \"husky install\"\n  },\n  \"lint-staged\": {\n    \"*.{js,ts}\": [\n      \"eslint --fix\",\n      \"prettier --write\"\n    ],\n    \"*.{json,yml,yaml}\": [\n      \"prettier --write\"\n    ],\n    \"*.md\": [\n      \"remark-preset-davidtheclark\",\n      \"remark-preset-davidtheclark --format\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/cosmiconfig/cosmiconfig.git\"\n  },\n  \"keywords\": [\n    \"load\",\n    \"configuration\",\n    \"config\"\n  ],\n  \"author\": \"Daniel Fischer <daniel@d-fischer.dev>\",\n  \"contributors\": [\n    \"Randolf J <jrandolf@google.com>\",\n    \"David Clark <david.dave.clark@gmail.com>\",\n    \"Bogdan Chadkin <trysound@yandex.ru>\",\n    \"Suhas Karanth <sudo.suhas@gmail.com>\"\n  ],\n  \"funding\": \"https://github.com/sponsors/d-fischer\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/cosmiconfig/cosmiconfig/issues\"\n  },\n  \"homepage\": \"https://github.com/cosmiconfig/cosmiconfig#readme\",\n  \"peerDependencies\": {\n    \"typescript\": \">=4.9.5\"\n  },\n  \"peerDependenciesMeta\": {\n    \"typescript\": {\n      \"optional\": true\n    }\n  },\n  \"dependencies\": {\n    \"import-fresh\": \"^3.3.0\",\n    \"js-yaml\": \"^4.1.0\",\n    \"parse-json\": \"^5.2.0\",\n    \"path-type\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/js-yaml\": \"^4.0.5\",\n    \"@types/node\": \"^14\",\n    \"@types/parse-json\": \"^4.0.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.5.0\",\n    \"@typescript-eslint/parser\": \"^6.5.0\",\n    \"@vitest/coverage-istanbul\": \"^0.34.3\",\n    \"cross-env\": \"^7.0.3\",\n    \"del\": \"^7.1.0\",\n    \"del-cli\": \"^5.1.0\",\n    \"eslint\": \"^8.48.0\",\n    \"eslint-config-davidtheclark-node\": \"^0.2.2\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-import-resolver-typescript\": \"^3.6.0\",\n    \"eslint-plugin-import\": \"^2.28.1\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-vitest\": \"^0.2.8\",\n    \"husky\": \"^8.0.3\",\n    \"lint-staged\": \"^14.0.1\",\n    \"make-dir\": \"^4.0.0\",\n    \"parent-module\": \"^3.0.0\",\n    \"prettier\": \"^3.0.3\",\n    \"remark-preset-davidtheclark\": \"^0.12.0\",\n    \"typescript\": \"^5.2.2\",\n    \"vitest\": \"^0.34.3\"\n  },\n  \"engines\": {\n    \"node\": \">=14\"\n  }\n}\n",
    "dist/types.js": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map",
    "dist/Explorer.js": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Explorer = void 0;\nconst promises_1 = __importDefault(require(\"fs/promises\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst path_type_1 = require(\"path-type\");\nconst ExplorerBase_js_1 = require(\"./ExplorerBase.js\");\nconst loaders_js_1 = require(\"./loaders.js\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nclass Explorer extends ExplorerBase_js_1.ExplorerBase {\n    async load(filepath) {\n        filepath = path_1.default.resolve(filepath);\n        const load = async () => {\n            return await this.config.transform(await this.#readConfiguration(filepath));\n        };\n        if (this.loadCache) {\n            return await (0, util_js_1.emplace)(this.loadCache, filepath, load);\n        }\n        return await load();\n    }\n    async search(from = '') {\n        if (this.config.metaConfigFilePath) {\n            this.loadingMetaConfig = true;\n            const config = await this.load(this.config.metaConfigFilePath);\n            this.loadingMetaConfig = false;\n            if (config && !config.isEmpty) {\n                return config;\n            }\n        }\n        const stopDir = path_1.default.resolve(this.config.stopDir);\n        from = path_1.default.resolve(from);\n        const search = async () => {\n            /* istanbul ignore if -- @preserve */\n            if (await (0, path_type_1.isDirectory)(from)) {\n                for (const place of this.config.searchPlaces) {\n                    const filepath = path_1.default.join(from, place);\n                    try {\n                        const result = await this.#readConfiguration(filepath);\n                        if (result !== null &&\n                            !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {\n                            return await this.config.transform(result);\n                        }\n                    }\n                    catch (error) {\n                        if (error.code === 'ENOENT' ||\n                            error.code === 'EISDIR' ||\n                            error.code === 'ENOTDIR') {\n                            continue;\n                        }\n                        throw error;\n                    }\n                }\n            }\n            const dir = path_1.default.dirname(from);\n            if (from !== stopDir && from !== dir) {\n                from = dir;\n                if (this.searchCache) {\n                    return await (0, util_js_1.emplace)(this.searchCache, from, search);\n                }\n                return await search();\n            }\n            return await this.config.transform(null);\n        };\n        if (this.searchCache) {\n            return await (0, util_js_1.emplace)(this.searchCache, from, search);\n        }\n        return await search();\n    }\n    async #readConfiguration(filepath) {\n        const contents = await promises_1.default.readFile(filepath, { encoding: 'utf-8' });\n        return this.toCosmiconfigResult(filepath, await this.#loadConfiguration(filepath, contents));\n    }\n    async #loadConfiguration(filepath, contents) {\n        if (contents.trim() === '') {\n            return;\n        }\n        if (path_1.default.basename(filepath) === 'package.json') {\n            return ((0, util_js_1.getPropertyByPath)((0, loaders_js_1.loadJson)(filepath, contents), this.config.packageProp) ?? null);\n        }\n        const extension = path_1.default.extname(filepath);\n        try {\n            const loader = this.config.loaders[extension || 'noExt'] ??\n                this.config.loaders['default'];\n            if (loader !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/return-await\n                return await loader(filepath, contents);\n            }\n        }\n        catch (error) {\n            error.filepath = filepath;\n            throw error;\n        }\n        throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);\n    }\n}\nexports.Explorer = Explorer;\n//# sourceMappingURL=Explorer.js.map",
    "dist/ExplorerSync.js": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExplorerSync = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst path_type_1 = require(\"path-type\");\nconst ExplorerBase_js_1 = require(\"./ExplorerBase.js\");\nconst loaders_js_1 = require(\"./loaders.js\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nclass ExplorerSync extends ExplorerBase_js_1.ExplorerBase {\n    load(filepath) {\n        filepath = path_1.default.resolve(filepath);\n        const load = () => {\n            return this.config.transform(this.#readConfiguration(filepath));\n        };\n        if (this.loadCache) {\n            return (0, util_js_1.emplace)(this.loadCache, filepath, load);\n        }\n        return load();\n    }\n    search(from = '') {\n        if (this.config.metaConfigFilePath) {\n            this.loadingMetaConfig = true;\n            const config = this.load(this.config.metaConfigFilePath);\n            this.loadingMetaConfig = false;\n            if (config && !config.isEmpty) {\n                return config;\n            }\n        }\n        const stopDir = path_1.default.resolve(this.config.stopDir);\n        from = path_1.default.resolve(from);\n        const search = () => {\n            /* istanbul ignore if -- @preserve */\n            if ((0, path_type_1.isDirectorySync)(from)) {\n                for (const place of this.config.searchPlaces) {\n                    const filepath = path_1.default.join(from, place);\n                    try {\n                        const result = this.#readConfiguration(filepath);\n                        if (result !== null &&\n                            !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {\n                            return this.config.transform(result);\n                        }\n                    }\n                    catch (error) {\n                        if (error.code === 'ENOENT' ||\n                            error.code === 'EISDIR' ||\n                            error.code === 'ENOTDIR') {\n                            continue;\n                        }\n                        throw error;\n                    }\n                }\n            }\n            const dir = path_1.default.dirname(from);\n            if (from !== stopDir && from !== dir) {\n                from = dir;\n                if (this.searchCache) {\n                    return (0, util_js_1.emplace)(this.searchCache, from, search);\n                }\n                return search();\n            }\n            return this.config.transform(null);\n        };\n        if (this.searchCache) {\n            return (0, util_js_1.emplace)(this.searchCache, from, search);\n        }\n        return search();\n    }\n    #readConfiguration(filepath) {\n        const contents = fs_1.default.readFileSync(filepath, 'utf8');\n        return this.toCosmiconfigResult(filepath, this.#loadConfiguration(filepath, contents));\n    }\n    #loadConfiguration(filepath, contents) {\n        if (contents.trim() === '') {\n            return;\n        }\n        if (path_1.default.basename(filepath) === 'package.json') {\n            return ((0, util_js_1.getPropertyByPath)((0, loaders_js_1.loadJson)(filepath, contents), this.config.packageProp) ?? null);\n        }\n        const extension = path_1.default.extname(filepath);\n        try {\n            const loader = this.config.loaders[extension || 'noExt'] ??\n                this.config.loaders['default'];\n            if (loader !== undefined) {\n                return loader(filepath, contents);\n            }\n        }\n        catch (error) {\n            error.filepath = filepath;\n            throw error;\n        }\n        throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);\n    }\n    /**\n     * @deprecated Use {@link ExplorerSync.prototype.load}.\n     */\n    /* istanbul ignore next */\n    loadSync(filepath) {\n        return this.load(filepath);\n    }\n    /**\n     * @deprecated Use {@link ExplorerSync.prototype.search}.\n     */\n    /* istanbul ignore next */\n    searchSync(from = '') {\n        return this.search(from);\n    }\n}\nexports.ExplorerSync = ExplorerSync;\n//# sourceMappingURL=ExplorerSync.js.map",
    "dist/loaders.js": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\n/* eslint-disable @typescript-eslint/no-require-imports */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadTs = exports.loadTsSync = exports.loadYaml = exports.loadJson = exports.loadJs = exports.loadJsSync = void 0;\nconst fs_1 = require(\"fs\");\nconst promises_1 = require(\"fs/promises\");\nconst path_1 = __importDefault(require(\"path\"));\nconst url_1 = require(\"url\");\nlet importFresh;\nconst loadJsSync = function loadJsSync(filepath) {\n    if (importFresh === undefined) {\n        importFresh = require('import-fresh');\n    }\n    return importFresh(filepath);\n};\nexports.loadJsSync = loadJsSync;\nconst loadJs = async function loadJs(filepath) {\n    try {\n        const { href } = (0, url_1.pathToFileURL)(filepath);\n        return (await Promise.resolve(`${href}`).then(s => __importStar(require(s)))).default;\n    }\n    catch (error) {\n        return (0, exports.loadJsSync)(filepath, '');\n    }\n};\nexports.loadJs = loadJs;\nlet parseJson;\nconst loadJson = function loadJson(filepath, content) {\n    if (parseJson === undefined) {\n        parseJson = require('parse-json');\n    }\n    try {\n        return parseJson(content);\n    }\n    catch (error) {\n        error.message = `JSON Error in ${filepath}:\\n${error.message}`;\n        throw error;\n    }\n};\nexports.loadJson = loadJson;\nlet yaml;\nconst loadYaml = function loadYaml(filepath, content) {\n    if (yaml === undefined) {\n        yaml = require('js-yaml');\n    }\n    try {\n        return yaml.load(content);\n    }\n    catch (error) {\n        error.message = `YAML Error in ${filepath}:\\n${error.message}`;\n        throw error;\n    }\n};\nexports.loadYaml = loadYaml;\nlet typescript;\nconst loadTsSync = function loadTsSync(filepath, content) {\n    /* istanbul ignore next -- @preserve */\n    if (typescript === undefined) {\n        typescript = require('typescript');\n    }\n    const compiledFilepath = `${filepath.slice(0, -2)}cjs`;\n    try {\n        const config = resolveTsConfig(path_1.default.dirname(filepath)) ?? {};\n        config.compilerOptions = {\n            ...config.compilerOptions,\n            module: typescript.ModuleKind.NodeNext,\n            moduleResolution: typescript.ModuleResolutionKind.NodeNext,\n            target: typescript.ScriptTarget.ES2022,\n            noEmit: false,\n        };\n        content = typescript.transpileModule(content, config).outputText;\n        (0, fs_1.writeFileSync)(compiledFilepath, content);\n        return (0, exports.loadJsSync)(compiledFilepath, content).default;\n    }\n    catch (error) {\n        error.message = `TypeScript Error in ${filepath}:\\n${error.message}`;\n        throw error;\n    }\n    finally {\n        if ((0, fs_1.existsSync)(compiledFilepath)) {\n            (0, fs_1.rmSync)(compiledFilepath);\n        }\n    }\n};\nexports.loadTsSync = loadTsSync;\nconst loadTs = async function loadTs(filepath, content) {\n    if (typescript === undefined) {\n        typescript = (await Promise.resolve().then(() => __importStar(require('typescript')))).default;\n    }\n    const compiledFilepath = `${filepath.slice(0, -2)}mjs`;\n    try {\n        const config = resolveTsConfig(path_1.default.dirname(filepath)) ?? {};\n        config.compilerOptions = {\n            ...config.compilerOptions,\n            module: typescript.ModuleKind.ES2022,\n            moduleResolution: typescript.ModuleResolutionKind.Bundler,\n            target: typescript.ScriptTarget.ES2022,\n            noEmit: false,\n        };\n        content = typescript.transpileModule(content, config).outputText;\n        await (0, promises_1.writeFile)(compiledFilepath, content);\n        const { href } = (0, url_1.pathToFileURL)(compiledFilepath);\n        return (await Promise.resolve(`${href}`).then(s => __importStar(require(s)))).default;\n    }\n    catch (error) {\n        error.message = `TypeScript Error in ${filepath}:\\n${error.message}`;\n        throw error;\n    }\n    finally {\n        if ((0, fs_1.existsSync)(compiledFilepath)) {\n            await (0, promises_1.rm)(compiledFilepath);\n        }\n    }\n};\nexports.loadTs = loadTs;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction resolveTsConfig(directory) {\n    const filePath = typescript.findConfigFile(directory, (fileName) => {\n        return typescript.sys.fileExists(fileName);\n    });\n    if (filePath !== undefined) {\n        const { config, error } = typescript.readConfigFile(filePath, (path) => typescript.sys.readFile(path));\n        if (error) {\n            throw new Error(`Error in ${filePath}: ${error.messageText.toString()}`);\n        }\n        return config;\n    }\n    return;\n}\n",
    "dist/util.js": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeUndefinedValuesFromObject = exports.getPropertyByPath = exports.emplace = void 0;\n/**\n * @internal\n */\nfunction emplace(map, key, fn) {\n    const cached = map.get(key);\n    if (cached !== undefined) {\n        return cached;\n    }\n    const result = fn();\n    map.set(key, result);\n    return result;\n}\nexports.emplace = emplace;\n// Resolves property names or property paths defined with period-delimited\n// strings or arrays of strings. Property names that are found on the source\n// object are used directly (even if they include a period).\n// Nested property names that include periods, within a path, are only\n// understood in array paths.\n/**\n * @internal\n */\nfunction getPropertyByPath(source, path) {\n    if (typeof path === 'string' &&\n        Object.prototype.hasOwnProperty.call(source, path)) {\n        return source[path];\n    }\n    const parsedPath = typeof path === 'string' ? path.split('.') : path;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return parsedPath.reduce((previous, key) => {\n        if (previous === undefined) {\n            return previous;\n        }\n        return previous[key];\n    }, source);\n}\nexports.getPropertyByPath = getPropertyByPath;\n/** @internal */\nfunction removeUndefinedValuesFromObject(options) {\n    /* istanbul ignore if -- @preserve */\n    if (!options) {\n        return undefined;\n    }\n    return Object.fromEntries(Object.entries(options).filter(([, value]) => value !== undefined));\n}\nexports.removeUndefinedValuesFromObject = removeUndefinedValuesFromObject;\n//# sourceMappingURL=util.js.map",
    "dist/ExplorerBase.js": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getExtensionDescription = exports.ExplorerBase = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nclass ExplorerBase {\n    #loadingMetaConfig = false;\n    config;\n    loadCache;\n    searchCache;\n    constructor(options) {\n        this.config = options;\n        if (options.cache) {\n            this.loadCache = new Map();\n            this.searchCache = new Map();\n        }\n        this.#validateConfig();\n    }\n    set loadingMetaConfig(value) {\n        this.#loadingMetaConfig = value;\n    }\n    #validateConfig() {\n        const config = this.config;\n        for (const place of config.searchPlaces) {\n            const extension = path_1.default.extname(place);\n            const loader = this.config.loaders[extension || 'noExt'] ??\n                this.config.loaders['default'];\n            if (loader === undefined) {\n                throw new Error(`Missing loader for ${getExtensionDescription(place)}.`);\n            }\n            if (typeof loader !== 'function') {\n                throw new Error(`Loader for ${getExtensionDescription(place)} is not a function: Received ${typeof loader}.`);\n            }\n        }\n    }\n    clearLoadCache() {\n        if (this.loadCache) {\n            this.loadCache.clear();\n        }\n    }\n    clearSearchCache() {\n        if (this.searchCache) {\n            this.searchCache.clear();\n        }\n    }\n    clearCaches() {\n        this.clearLoadCache();\n        this.clearSearchCache();\n    }\n    toCosmiconfigResult(filepath, config) {\n        if (config === null) {\n            return null;\n        }\n        if (config === undefined) {\n            return { filepath, config: undefined, isEmpty: true };\n        }\n        if (this.config.applyPackagePropertyPathToConfiguration ||\n            this.#loadingMetaConfig) {\n            config = (0, util_js_1.getPropertyByPath)(config, this.config.packageProp);\n        }\n        if (config === undefined) {\n            return { filepath, config: undefined, isEmpty: true };\n        }\n        return { config, filepath };\n    }\n}\nexports.ExplorerBase = ExplorerBase;\n/**\n * @internal\n */\nfunction getExtensionDescription(extension) {\n    /* istanbul ignore next -- @preserve */\n    return extension ? `extension \"${extension}\"` : 'files without extensions';\n}\nexports.getExtensionDescription = getExtensionDescription;\n//# sourceMappingURL=ExplorerBase.js.map"
  },
  "externals": [
    "os",
    "fs/promises",
    "path",
    "path-type",
    "fs",
    "url",
    "import-fresh",
    "parse-json",
    "js-yaml",
    "typescript"
  ]
}
