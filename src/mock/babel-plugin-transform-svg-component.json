{
  "packageName": "@svgr/babel-plugin-transform-svg-component",
  "packageVersion": "8.0.0",
  "request": "@svgr/babel-plugin-transform-svg-component",
  "resolved": "dist/index.js",
  "files": {
    "dist/index.js": "'use strict';\n\nvar core = require('@babel/core');\n\nconst defaultTemplate = (variables, { tpl }) => {\n  return tpl`\n${variables.imports};\n\n${variables.interfaces};\n\nconst ${variables.componentName} = (${variables.props}) => (\n  ${variables.jsx}\n);\n \n${variables.exports};\n`;\n};\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst tsOptionalPropertySignature = (...args) => {\n  return __spreadProps(__spreadValues({}, core.types.tsPropertySignature(...args)), {\n    optional: true\n  });\n};\nconst getOrCreateImport = ({ imports }, sourceValue, importKind = void 0) => {\n  const existing = imports.find(\n    (imp2) => imp2.source.value === sourceValue && imp2.importKind === importKind && !imp2.specifiers.some(\n      (specifier) => specifier.type === \"ImportNamespaceSpecifier\"\n    )\n  );\n  if (existing)\n    return existing;\n  const imp = core.types.importDeclaration([], core.types.stringLiteral(sourceValue));\n  if (importKind !== void 0) {\n    imp.importKind = importKind;\n  }\n  imports.push(imp);\n  return imp;\n};\nconst tsTypeReferenceSVGProps = (ctx) => {\n  if (ctx.opts.native) {\n    const identifier2 = core.types.identifier(\"SvgProps\");\n    getOrCreateImport(ctx, \"react-native-svg\", \"type\").specifiers.push(\n      core.types.importSpecifier(identifier2, identifier2)\n    );\n    return core.types.tsTypeReference(identifier2);\n  }\n  const identifier = core.types.identifier(\"SVGProps\");\n  getOrCreateImport(ctx, ctx.importSource, \"type\").specifiers.push(\n    core.types.importSpecifier(identifier, identifier)\n  );\n  return core.types.tsTypeReference(\n    identifier,\n    core.types.tsTypeParameterInstantiation([\n      core.types.tsTypeReference(core.types.identifier(\"SVGSVGElement\"))\n    ])\n  );\n};\nconst tsTypeReferenceSVGRef = (ctx) => {\n  const identifier = core.types.identifier(\"Ref\");\n  getOrCreateImport(ctx, ctx.importSource).specifiers.push(\n    core.types.importSpecifier(identifier, identifier)\n  );\n  return core.types.tsTypeReference(\n    identifier,\n    core.types.tsTypeParameterInstantiation([\n      core.types.tsTypeReference(core.types.identifier(\"SVGSVGElement\"))\n    ])\n  );\n};\nconst getJsxRuntimeImport = (cfg) => {\n  const specifiers = (() => {\n    if (cfg.namespace)\n      return [core.types.importNamespaceSpecifier(core.types.identifier(cfg.namespace))];\n    if (cfg.defaultSpecifier) {\n      const identifier = core.types.identifier(cfg.defaultSpecifier);\n      return [core.types.importDefaultSpecifier(identifier)];\n    }\n    if (cfg.specifiers)\n      return cfg.specifiers.map((specifier) => {\n        const identifier = core.types.identifier(specifier);\n        return core.types.importSpecifier(identifier, identifier);\n      });\n    throw new Error(\n      `Specify \"namespace\", \"defaultSpecifier\", or \"specifiers\" in \"jsxRuntimeImport\" option`\n    );\n  })();\n  return core.types.importDeclaration(specifiers, core.types.stringLiteral(cfg.source));\n};\nconst defaultJsxRuntimeImport = {\n  source: \"react\",\n  namespace: \"React\"\n};\nconst defaultImportSource = \"react\";\nconst getVariables = ({\n  opts,\n  jsx\n}) => {\n  var _a, _b, _c, _d;\n  const interfaces = [];\n  const props = [];\n  const imports = [];\n  const exports = [];\n  const ctx = {\n    importSource: (_a = opts.importSource) != null ? _a : defaultImportSource,\n    exportIdentifier: core.types.identifier(opts.state.componentName),\n    opts,\n    interfaces,\n    props,\n    imports,\n    exports\n  };\n  if (opts.jsxRuntime !== \"automatic\") {\n    imports.push(\n      getJsxRuntimeImport((_b = opts.jsxRuntimeImport) != null ? _b : defaultJsxRuntimeImport)\n    );\n  }\n  if (opts.native) {\n    getOrCreateImport(ctx, \"react-native-svg\").specifiers.push(\n      core.types.importDefaultSpecifier(core.types.identifier(\"Svg\"))\n    );\n  }\n  if (opts.titleProp || opts.descProp) {\n    const properties = [];\n    const propertySignatures = [];\n    const createProperty = (attr) => {\n      return core.types.objectProperty(\n        core.types.identifier(attr),\n        core.types.identifier(attr),\n        false,\n        true\n      );\n    };\n    const createSignature = (attr) => {\n      return tsOptionalPropertySignature(\n        core.types.identifier(attr),\n        core.types.tsTypeAnnotation(core.types.tsStringKeyword())\n      );\n    };\n    if (opts.titleProp) {\n      properties.push(createProperty(\"title\"), createProperty(\"titleId\"));\n      if (opts.typescript) {\n        propertySignatures.push(\n          createSignature(\"title\"),\n          createSignature(\"titleId\")\n        );\n      }\n    }\n    if (opts.descProp) {\n      properties.push(createProperty(\"desc\"), createProperty(\"descId\"));\n      if (opts.typescript) {\n        propertySignatures.push(\n          createSignature(\"desc\"),\n          createSignature(\"descId\")\n        );\n      }\n    }\n    const prop = core.types.objectPattern(properties);\n    props.push(prop);\n    if (opts.typescript) {\n      interfaces.push(\n        core.types.tsInterfaceDeclaration(\n          core.types.identifier(\"SVGRProps\"),\n          null,\n          null,\n          core.types.tSInterfaceBody(propertySignatures)\n        )\n      );\n      prop.typeAnnotation = core.types.tsTypeAnnotation(\n        core.types.tsTypeReference(core.types.identifier(\"SVGRProps\"))\n      );\n    }\n  }\n  if (opts.expandProps) {\n    const identifier = core.types.identifier(\"props\");\n    if (core.types.isObjectPattern(props[0])) {\n      props[0].properties.push(core.types.restElement(identifier));\n      if (opts.typescript) {\n        props[0].typeAnnotation = core.types.tsTypeAnnotation(\n          core.types.tsIntersectionType([\n            tsTypeReferenceSVGProps(ctx),\n            props[0].typeAnnotation.typeAnnotation\n          ])\n        );\n      }\n    } else {\n      props.push(identifier);\n      if (opts.typescript) {\n        identifier.typeAnnotation = core.types.tsTypeAnnotation(\n          tsTypeReferenceSVGProps(ctx)\n        );\n      }\n    }\n  }\n  if (opts.ref) {\n    if (props.length === 0) {\n      props.push(core.types.identifier(\"_\"));\n    }\n    const prop = core.types.identifier(\"ref\");\n    props.push(prop);\n    if (opts.typescript) {\n      prop.typeAnnotation = core.types.tsTypeAnnotation(tsTypeReferenceSVGRef(ctx));\n    }\n    const forwardRef = core.types.identifier(\"forwardRef\");\n    const ForwardRef = core.types.identifier(\"ForwardRef\");\n    getOrCreateImport(ctx, ctx.importSource).specifiers.push(\n      core.types.importSpecifier(forwardRef, forwardRef)\n    );\n    exports.push(\n      core.types.variableDeclaration(\"const\", [\n        core.types.variableDeclarator(\n          ForwardRef,\n          core.types.callExpression(forwardRef, [ctx.exportIdentifier])\n        )\n      ])\n    );\n    ctx.exportIdentifier = ForwardRef;\n  }\n  if (opts.memo) {\n    const memo = core.types.identifier(\"memo\");\n    const Memo = core.types.identifier(\"Memo\");\n    getOrCreateImport(ctx, ctx.importSource).specifiers.push(\n      core.types.importSpecifier(memo, memo)\n    );\n    exports.push(\n      core.types.variableDeclaration(\"const\", [\n        core.types.variableDeclarator(\n          Memo,\n          core.types.callExpression(memo, [ctx.exportIdentifier])\n        )\n      ])\n    );\n    ctx.exportIdentifier = Memo;\n  }\n  if (((_c = opts.state.caller) == null ? void 0 : _c.previousExport) || opts.exportType === \"named\") {\n    if (!opts.namedExport) {\n      throw new Error(`\"namedExport\" not specified`);\n    }\n    exports.push(\n      core.types.exportNamedDeclaration(null, [\n        core.types.exportSpecifier(ctx.exportIdentifier, core.types.identifier(opts.namedExport))\n      ])\n    );\n    if ((_d = opts.state.caller) == null ? void 0 : _d.previousExport) {\n      const previousExportAst = core.template.ast(opts.state.caller.previousExport);\n      exports.push(\n        ...Array.isArray(previousExportAst) ? previousExportAst : [previousExportAst]\n      );\n    }\n  } else {\n    exports.push(core.types.exportDefaultDeclaration(ctx.exportIdentifier));\n  }\n  return {\n    componentName: opts.state.componentName,\n    props,\n    interfaces,\n    imports,\n    exports,\n    jsx\n  };\n};\n\nconst plugin = (_, opts) => {\n  const template = opts.template || defaultTemplate;\n  const plugins = opts.typescript ? [\"jsx\", \"typescript\"] : [\"jsx\"];\n  const tpl = core.template.smart({ plugins, preserveComments: true }).ast;\n  return {\n    visitor: {\n      Program(path) {\n        const jsx = path.node.body[0].expression;\n        const variables = getVariables({\n          opts,\n          jsx\n        });\n        const body = template(variables, { options: opts, tpl });\n        path.node.body = Array.isArray(body) ? body : [body];\n        path.replaceWith(path.node);\n      }\n    }\n  };\n};\n\nmodule.exports = plugin;\n//# sourceMappingURL=index.js.map\n",
    "package.json": "{\n  \"name\": \"@svgr/babel-plugin-transform-svg-component\",\n  \"description\": \"Transform SVG into component\",\n  \"version\": \"8.0.0\",\n  \"main\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"repository\": \"https://github.com/gregberge/svgr/tree/main/packages/babel-plugin-transform-svg-component\",\n  \"author\": \"Greg Bergé <berge.greg@gmail.com>\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"keywords\": [\n    \"babel-plugin\"\n  ],\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"homepage\": \"https://react-svgr.com\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/gregberge\"\n  },\n  \"license\": \"MIT\",\n  \"peerDependencies\": {\n    \"@babel/core\": \"^7.0.0-0\"\n  },\n  \"scripts\": {\n    \"reset\": \"rm -rf dist\",\n    \"build\": \"rollup -c ../../build/rollup.config.mjs\",\n    \"prepublishOnly\": \"pnpm run reset && pnpm run build\"\n  },\n  \"devDependencies\": {\n    \"@types/babel__template\": \"^7.4.1\"\n  },\n  \"gitHead\": \"52a1079681477587ef0d842c0e78531adf2d2520\"\n}\n"
  },
  "externals": [
    "@babel/core"
  ]
}
