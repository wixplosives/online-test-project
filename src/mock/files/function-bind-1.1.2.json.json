{
  "packageName": "function-bind",
  "packageVersion": "1.1.2",
  "request": "function-bind",
  "resolved": "index.js",
  "files": {
    "index.js": "'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n",
    "package.json": "{\n  \"name\": \"function-bind\",\n  \"version\": \"1.1.2\",\n  \"description\": \"Implementation of Function.prototype.bind\",\n  \"keywords\": [\n    \"function\",\n    \"bind\",\n    \"shim\",\n    \"es5\"\n  ],\n  \"author\": \"Raynos <raynos2@gmail.com>\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Raynos/function-bind.git\"\n  },\n  \"funding\": {\n    \"url\": \"https://github.com/sponsors/ljharb\"\n  },\n  \"main\": \"index\",\n  \"homepage\": \"https://github.com/Raynos/function-bind\",\n  \"contributors\": [\n    {\n      \"name\": \"Raynos\"\n    },\n    {\n      \"name\": \"Jordan Harband\",\n      \"url\": \"https://github.com/ljharb\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/Raynos/function-bind/issues\",\n    \"email\": \"raynos2@gmail.com\"\n  },\n  \"devDependencies\": {\n    \"@ljharb/eslint-config\": \"^21.1.0\",\n    \"aud\": \"^2.0.3\",\n    \"auto-changelog\": \"^2.4.0\",\n    \"eslint\": \"=8.8.0\",\n    \"in-publish\": \"^2.0.1\",\n    \"npmignore\": \"^0.3.0\",\n    \"nyc\": \"^10.3.2\",\n    \"safe-publish-latest\": \"^2.0.0\",\n    \"tape\": \"^5.7.1\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"prepublishOnly\": \"safe-publish-latest\",\n    \"prepublish\": \"not-in-publish || npm run prepublishOnly\",\n    \"prepack\": \"npmignore --auto --commentLines=autogenerated\",\n    \"pretest\": \"npm run lint\",\n    \"test\": \"npm run tests-only\",\n    \"posttest\": \"aud --production\",\n    \"tests-only\": \"nyc tape 'test/**/*.js'\",\n    \"lint\": \"eslint --ext=js,mjs .\",\n    \"version\": \"auto-changelog && git add CHANGELOG.md\",\n    \"postversion\": \"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \\\"v$(node -e \\\"console.log(require('./package.json').version)\\\")\\\"\"\n  },\n  \"testling\": {\n    \"files\": \"test/index.js\",\n    \"browsers\": [\n      \"ie/8..latest\",\n      \"firefox/16..latest\",\n      \"firefox/nightly\",\n      \"chrome/22..latest\",\n      \"chrome/canary\",\n      \"opera/12..latest\",\n      \"opera/next\",\n      \"safari/5.1..latest\",\n      \"ipad/6.0..latest\",\n      \"iphone/6.0..latest\",\n      \"android-browser/4.2..latest\"\n    ]\n  },\n  \"auto-changelog\": {\n    \"output\": \"CHANGELOG.md\",\n    \"template\": \"keepachangelog\",\n    \"unreleased\": false,\n    \"commitLimit\": false,\n    \"backfillLimit\": false,\n    \"hideCredit\": true\n  },\n  \"publishConfig\": {\n    \"ignore\": [\n      \".github/workflows\"\n    ]\n  }\n}\n",
    "implementation.js": "'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar toStr = Object.prototype.toString;\nvar max = Math.max;\nvar funcType = '[object Function]';\n\nvar concatty = function concatty(a, b) {\n    var arr = [];\n\n    for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n    }\n\n    return arr;\n};\n\nvar slicy = function slicy(arrLike, offset) {\n    var arr = [];\n    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n    }\n    return arr;\n};\n\nvar joiny = function (arr, joiner) {\n    var str = '';\n    for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n            str += joiner;\n        }\n    }\n    return str;\n};\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                concatty(args, arguments)\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        }\n        return target.apply(\n            that,\n            concatty(args, arguments)\n        );\n\n    };\n\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = '$' + i;\n    }\n\n    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n"
  },
  "externals": []
}
