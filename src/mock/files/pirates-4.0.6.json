{
  "packageName": "pirates",
  "packageVersion": "4.0.6",
  "request": "pirates",
  "resolved": "lib/index.js",
  "files": {
    "lib/index.js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addHook = addHook;\nvar _module = _interopRequireDefault(require(\"module\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/* (c) 2015 Ari Porad (@ariporad) <http://ariporad.com>. License: ariporad.mit-license.org */\n\nconst nodeModulesRegex = /^(?:.*[\\\\/])?node_modules(?:[\\\\/].*)?$/;\n// Guard against poorly mocked module constructors.\nconst Module = module.constructor.length > 1 ? module.constructor : _module.default;\nconst HOOK_RETURNED_NOTHING_ERROR_MESSAGE = '[Pirates] A hook returned a non-string, or nothing at all! This is a' + ' violation of intergalactic law!\\n' + '--------------------\\n' + 'If you have no idea what this means or what Pirates is, let me explain: ' + 'Pirates is a module that makes is easy to implement require hooks. One of' + \" the require hooks you're using uses it. One of these require hooks\" + \" didn't return anything from it's handler, so we don't know what to\" + ' do. You might want to debug this.';\n\n/**\n * @param {string} filename The filename to check.\n * @param {string[]} exts The extensions to hook. Should start with '.' (ex. ['.js']).\n * @param {Matcher|null} matcher A matcher function, will be called with path to a file. Should return truthy if the file should be hooked, falsy otherwise.\n * @param {boolean} ignoreNodeModules Auto-ignore node_modules. Independent of any matcher.\n */\nfunction shouldCompile(filename, exts, matcher, ignoreNodeModules) {\n  if (typeof filename !== 'string') {\n    return false;\n  }\n  if (exts.indexOf(_path.default.extname(filename)) === -1) {\n    return false;\n  }\n  const resolvedFilename = _path.default.resolve(filename);\n  if (ignoreNodeModules && nodeModulesRegex.test(resolvedFilename)) {\n    return false;\n  }\n  if (matcher && typeof matcher === 'function') {\n    return !!matcher(resolvedFilename);\n  }\n  return true;\n}\n\n/**\n * @callback Hook The hook. Accepts the code of the module and the filename.\n * @param {string} code\n * @param {string} filename\n * @returns {string}\n */\n/**\n * @callback Matcher A matcher function, will be called with path to a file.\n *\n * Should return truthy if the file should be hooked, falsy otherwise.\n * @param {string} path\n * @returns {boolean}\n */\n/**\n * @callback RevertFunction Reverts the hook when called.\n * @returns {void}\n */\n/**\n * @typedef {object} Options\n * @property {Matcher|null} [matcher=null] A matcher function, will be called with path to a file.\n *\n * Should return truthy if the file should be hooked, falsy otherwise.\n *\n * @property {string[]} [extensions=['.js']] The extensions to hook. Should start with '.' (ex. ['.js']).\n * @property {string[]} [exts=['.js']] The extensions to hook. Should start with '.' (ex. ['.js']).\n *\n * @property {string[]} [extension=['.js']] The extensions to hook. Should start with '.' (ex. ['.js']).\n * @property {string[]} [ext=['.js']] The extensions to hook. Should start with '.' (ex. ['.js']).\n *\n * @property {boolean} [ignoreNodeModules=true] Auto-ignore node_modules. Independent of any matcher.\n */\n\n/**\n * Add a require hook.\n *\n * @param {Hook} hook The hook. Accepts the code of the module and the filename. Required.\n * @param {Options} [opts] Options\n * @returns {RevertFunction} The `revert` function. Reverts the hook when called.\n */\nfunction addHook(hook, opts = {}) {\n  let reverted = false;\n  const loaders = [];\n  const oldLoaders = [];\n  let exts;\n\n  // We need to do this to fix #15. Basically, if you use a non-standard extension (ie. .jsx), then\n  // We modify the .js loader, then use the modified .js loader for as the base for .jsx.\n  // This prevents that.\n  const originalJSLoader = Module._extensions['.js'];\n  const matcher = opts.matcher || null;\n  const ignoreNodeModules = opts.ignoreNodeModules !== false;\n  exts = opts.extensions || opts.exts || opts.extension || opts.ext || ['.js'];\n  if (!Array.isArray(exts)) {\n    exts = [exts];\n  }\n  exts.forEach(ext => {\n    if (typeof ext !== 'string') {\n      throw new TypeError(`Invalid Extension: ${ext}`);\n    }\n    const oldLoader = Module._extensions[ext] || originalJSLoader;\n    oldLoaders[ext] = Module._extensions[ext];\n    loaders[ext] = Module._extensions[ext] = function newLoader(mod, filename) {\n      let compile;\n      if (!reverted) {\n        if (shouldCompile(filename, exts, matcher, ignoreNodeModules)) {\n          compile = mod._compile;\n          mod._compile = function _compile(code) {\n            // reset the compile immediately as otherwise we end up having the\n            // compile function being changed even though this loader might be reverted\n            // Not reverting it here leads to long useless compile chains when doing\n            // addHook -> revert -> addHook -> revert -> ...\n            // The compile function is also anyway created new when the loader is called a second time.\n            mod._compile = compile;\n            const newCode = hook(code, filename);\n            if (typeof newCode !== 'string') {\n              throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);\n            }\n            return mod._compile(newCode, filename);\n          };\n        }\n      }\n      oldLoader(mod, filename);\n    };\n  });\n  return function revert() {\n    if (reverted) return;\n    reverted = true;\n    exts.forEach(ext => {\n      // if the current loader for the extension is our loader then unregister it and set the oldLoader again\n      // if not we can not do anything as we cannot remove a loader from within the loader-chain\n      if (Module._extensions[ext] === loaders[ext]) {\n        if (!oldLoaders[ext]) {\n          delete Module._extensions[ext];\n        } else {\n          Module._extensions[ext] = oldLoaders[ext];\n        }\n      }\n    });\n  };\n}",
    "package.json": "{\n  \"name\": \"pirates\",\n  \"description\": \"Properly hijack require, i.e., properly define require hooks and customizations\",\n  \"main\": \"lib/index.js\",\n  \"types\": \"index.d.ts\",\n  \"scripts\": {\n    \"clean\": \"rimraf lib\",\n    \"build\": \"babel src -d lib\",\n    \"test\": \"cross-env BABEL_ENV=test yarn run build && nyc ava\",\n    \"lint\": \"eslint --report-unused-disable-directives .\",\n    \"prepublishOnly\": \"yarn run build\"\n  },\n  \"files\": [\n    \"lib\",\n    \"index.d.ts\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/danez/pirates.git\"\n  },\n  \"engines\": {\n    \"node\": \">= 6\"\n  },\n  \"author\": {\n    \"name\": \"Ari Porad\",\n    \"email\": \"ari@ariporad.com\",\n    \"url\": \"http://ariporad.com\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"7.21.0\",\n    \"@babel/core\": \"7.21.4\",\n    \"@babel/preset-env\": \"7.21.4\",\n    \"ava\": \"1.4.1\",\n    \"babel-core\": \"7.0.0-bridge.0\",\n    \"babel-eslint\": \"10.1.0\",\n    \"babel-plugin-istanbul\": \"5.2.0\",\n    \"cross-env\": \"5.2.1\",\n    \"decache\": \"4.6.1\",\n    \"eslint\": \"5.16.0\",\n    \"eslint-config-prettier\": \"4.3.0\",\n    \"eslint-plugin-import\": \"2.27.5\",\n    \"eslint-plugin-prettier\": \"3.4.1\",\n    \"mock-require\": \"3.0.3\",\n    \"nyc\": \"13.3.0\",\n    \"prettier\": \"1.19.1\",\n    \"rewire\": \"4.0.1\",\n    \"rimraf\": \"3.0.2\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/danez/pirates/issues\"\n  },\n  \"homepage\": \"https://github.com/danez/pirates#readme\",\n  \"ava\": {\n    \"files\": [\n      \"test/*.js\"\n    ],\n    \"sources\": [\n      \"lib/**/*.js\"\n    ]\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/*.js\"\n    ],\n    \"reporter\": [\n      \"json\",\n      \"text\"\n    ],\n    \"sourceMap\": false,\n    \"instrument\": false\n  },\n  \"version\": \"4.0.6\"\n}\n"
  },
  "externals": [
    "module",
    "path"
  ]
}
