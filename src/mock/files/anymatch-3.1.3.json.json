{
  "packageName": "anymatch",
  "packageVersion": "3.1.3",
  "request": "anymatch",
  "resolved": "index.js",
  "files": {
    "index.js": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\nconst picomatch = require('picomatch');\nconst normalizePath = require('normalize-path');\n\n/**\n * @typedef {(testString: string) => boolean} AnymatchFn\n * @typedef {string|RegExp|AnymatchFn} AnymatchPattern\n * @typedef {AnymatchPattern|AnymatchPattern[]} AnymatchMatcher\n */\nconst BANG = '!';\nconst DEFAULT_OPTIONS = {returnIndex: false};\nconst arrify = (item) => Array.isArray(item) ? item : [item];\n\n/**\n * @param {AnymatchPattern} matcher\n * @param {object} options\n * @returns {AnymatchFn}\n */\nconst createPattern = (matcher, options) => {\n  if (typeof matcher === 'function') {\n    return matcher;\n  }\n  if (typeof matcher === 'string') {\n    const glob = picomatch(matcher, options);\n    return (string) => matcher === string || glob(string);\n  }\n  if (matcher instanceof RegExp) {\n    return (string) => matcher.test(string);\n  }\n  return (string) => false;\n};\n\n/**\n * @param {Array<Function>} patterns\n * @param {Array<Function>} negPatterns\n * @param {String|Array} args\n * @param {Boolean} returnIndex\n * @returns {boolean|number}\n */\nconst matchPatterns = (patterns, negPatterns, args, returnIndex) => {\n  const isList = Array.isArray(args);\n  const _path = isList ? args[0] : args;\n  if (!isList && typeof _path !== 'string') {\n    throw new TypeError('anymatch: second argument must be a string: got ' +\n      Object.prototype.toString.call(_path))\n  }\n  const path = normalizePath(_path, false);\n\n  for (let index = 0; index < negPatterns.length; index++) {\n    const nglob = negPatterns[index];\n    if (nglob(path)) {\n      return returnIndex ? -1 : false;\n    }\n  }\n\n  const applied = isList && [path].concat(args.slice(1));\n  for (let index = 0; index < patterns.length; index++) {\n    const pattern = patterns[index];\n    if (isList ? pattern(...applied) : pattern(path)) {\n      return returnIndex ? index : true;\n    }\n  }\n\n  return returnIndex ? -1 : false;\n};\n\n/**\n * @param {AnymatchMatcher} matchers\n * @param {Array|string} testString\n * @param {object} options\n * @returns {boolean|number|Function}\n */\nconst anymatch = (matchers, testString, options = DEFAULT_OPTIONS) => {\n  if (matchers == null) {\n    throw new TypeError('anymatch: specify first argument');\n  }\n  const opts = typeof options === 'boolean' ? {returnIndex: options} : options;\n  const returnIndex = opts.returnIndex || false;\n\n  // Early cache for matchers.\n  const mtchers = arrify(matchers);\n  const negatedGlobs = mtchers\n    .filter(item => typeof item === 'string' && item.charAt(0) === BANG)\n    .map(item => item.slice(1))\n    .map(item => picomatch(item, opts));\n  const patterns = mtchers\n    .filter(item => typeof item !== 'string' || (typeof item === 'string' && item.charAt(0) !== BANG))\n    .map(matcher => createPattern(matcher, opts));\n\n  if (testString == null) {\n    return (testString, ri = false) => {\n      const returnIndex = typeof ri === 'boolean' ? ri : false;\n      return matchPatterns(patterns, negatedGlobs, testString, returnIndex);\n    }\n  }\n\n  return matchPatterns(patterns, negatedGlobs, testString, returnIndex);\n};\n\nanymatch.default = anymatch;\nmodule.exports = anymatch;\n",
    "package.json": "{\n  \"name\": \"anymatch\",\n  \"version\": \"3.1.3\",\n  \"description\": \"Matches strings against configurable strings, globs, regular expressions, and/or functions\",\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\"\n  ],\n  \"dependencies\": {\n    \"normalize-path\": \"^3.0.0\",\n    \"picomatch\": \"^2.0.4\"\n  },\n  \"author\": {\n    \"name\": \"Elan Shanker\",\n    \"url\": \"https://github.com/es128\"\n  },\n  \"license\": \"ISC\",\n  \"homepage\": \"https://github.com/micromatch/anymatch\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/micromatch/anymatch\"\n  },\n  \"keywords\": [\n    \"match\",\n    \"any\",\n    \"string\",\n    \"file\",\n    \"fs\",\n    \"list\",\n    \"glob\",\n    \"regex\",\n    \"regexp\",\n    \"regular\",\n    \"expression\",\n    \"function\"\n  ],\n  \"scripts\": {\n    \"test\": \"nyc mocha\",\n    \"mocha\": \"mocha\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^6.1.3\",\n    \"nyc\": \"^14.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">= 8\"\n  }\n}\n"
  },
  "externals": [
    "picomatch",
    "normalize-path"
  ]
}
