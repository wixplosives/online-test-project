{
  "packageName": "@cspotcode/source-map-support",
  "packageVersion": "0.8.1",
  "request": "@cspotcode/source-map-support",
  "resolved": "source-map-support.js",
  "files": {
    "source-map-support.js": "const { TraceMap, originalPositionFor, AnyMap } = require('@jridgewell/trace-mapping');\nvar path = require('path');\nconst { fileURLToPath, pathToFileURL } = require('url');\nvar util = require('util');\n\nvar fs;\ntry {\n  fs = require('fs');\n  if (!fs.existsSync || !fs.readFileSync) {\n    // fs doesn't have all methods we need\n    fs = null;\n  }\n} catch (err) {\n  /* nop */\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param {NodeModule} mod\n * @param {string} request\n */\nfunction dynamicRequire(mod, request) {\n  return mod.require(request);\n}\n\n/**\n * @typedef {{\n *   enabled: boolean;\n *   originalValue: any;\n *   installedValue: any;\n * }} HookState\n * Used for installing and uninstalling hooks\n */\n\n// Increment this if the format of sharedData changes in a breaking way.\nvar sharedDataVersion = 1;\n\n/**\n * @template T\n * @param {T} defaults\n * @returns {T}\n */\nfunction initializeSharedData(defaults) {\n  var sharedDataKey = 'source-map-support/sharedData';\n  if (typeof Symbol !== 'undefined') {\n    sharedDataKey = Symbol.for(sharedDataKey);\n  }\n  var sharedData = this[sharedDataKey];\n  if (!sharedData) {\n    sharedData = { version: sharedDataVersion };\n    if (Object.defineProperty) {\n      Object.defineProperty(this, sharedDataKey, { value: sharedData });\n    } else {\n      this[sharedDataKey] = sharedData;\n    }\n  }\n  if (sharedDataVersion !== sharedData.version) {\n    throw new Error(\"Multiple incompatible instances of source-map-support were loaded\");\n  }\n  for (var key in defaults) {\n    if (!(key in sharedData)) {\n      sharedData[key] = defaults[key];\n    }\n  }\n  return sharedData;\n}\n\n// If multiple instances of source-map-support are loaded into the same\n// context, they shouldn't overwrite each other.  By storing handlers, caches,\n// and other state on a shared object, different instances of\n// source-map-support can work together in a limited way. This does require\n// that future versions of source-map-support continue to support the fields on\n// this object. If this internal contract ever needs to be broken, increment\n// sharedDataVersion. (This version number is not the same as any of the\n// package's version numbers, which should reflect the *external* API of\n// source-map-support.)\nvar sharedData = initializeSharedData({\n\n  // Only install once if called multiple times\n  // Remember how the environment looked before installation so we can restore if able\n  /** @type {HookState} */\n  errorPrepareStackTraceHook: undefined,\n  /** @type {HookState} */\n  processEmitHook: undefined,\n  /** @type {HookState} */\n  moduleResolveFilenameHook: undefined,\n\n  /** @type {Array<(request: string, parent: any, isMain: boolean, options: any, redirectedRequest: string) => void>} */\n  onConflictingLibraryRedirectArr: [],\n\n  // If true, the caches are reset before a stack trace formatting operation\n  emptyCacheBetweenOperations: false,\n\n  // Maps a file path to a string containing the file contents\n  fileContentsCache: Object.create(null),\n\n  // Maps a file path to a source map for that file\n  /** @type {Record<string, {url: string, map: TraceMap}} */\n  sourceMapCache: Object.create(null),\n\n  // Priority list of retrieve handlers\n  retrieveFileHandlers: [],\n  retrieveMapHandlers: [],\n\n  // Priority list of internally-implemented handlers.\n  // When resetting state, we must keep these.\n  internalRetrieveFileHandlers: [],\n  internalRetrieveMapHandlers: [],\n\n});\n\n// Supports {browser, node, auto}\nvar environment = \"auto\";\n\n// Regex for detecting source maps\nvar reSourceMap = /^data:application\\/json[^,]+base64,/;\n\nfunction isInBrowser() {\n  if (environment === \"browser\")\n    return true;\n  if (environment === \"node\")\n    return false;\n  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === \"renderer\"));\n}\n\nfunction hasGlobalProcessEventEmitter() {\n  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));\n}\n\nfunction tryFileURLToPath(v) {\n  if(isFileUrl(v)) {\n    return fileURLToPath(v);\n  }\n  return v;\n}\n\n// TODO un-copy these from resolve-uri; see if they can be exported from that lib\nfunction isFileUrl(input) {\n  return input.startsWith('file:');\n}\nfunction isAbsoluteUrl(input) {\n  return schemeRegex.test(input);\n}\n// Matches the scheme of a URL, eg \"http://\"\nconst schemeRegex = /^[\\w+.-]+:\\/\\//;\nfunction isSchemeRelativeUrl(input) {\n  return input.startsWith('//');\n}\n\n// #region Caches\n/** @param {string} pathOrFileUrl */\nfunction getCacheKey(pathOrFileUrl) {\n  if(pathOrFileUrl.startsWith('node:')) return pathOrFileUrl;\n  if(isFileUrl(pathOrFileUrl)) {\n    // Must normalize spaces to %20, stuff like that\n    return new URL(pathOrFileUrl).toString();\n  } else {\n    try {\n      return pathToFileURL(pathOrFileUrl).toString();\n    } catch {\n      return pathOrFileUrl;\n    }\n  }\n}\nfunction getFileContentsCache(key) {\n  return sharedData.fileContentsCache[getCacheKey(key)];\n}\nfunction hasFileContentsCacheFromKey(key) {\n  return Object.prototype.hasOwnProperty.call(sharedData.fileContentsCache, key);\n}\nfunction getFileContentsCacheFromKey(key) {\n  return sharedData.fileContentsCache[key];\n}\nfunction setFileContentsCache(key, value) {\n  return sharedData.fileContentsCache[getCacheKey(key)] = value;\n}\nfunction getSourceMapCache(key) {\n  return sharedData.sourceMapCache[getCacheKey(key)];\n}\nfunction setSourceMapCache(key, value) {\n  return sharedData.sourceMapCache[getCacheKey(key)] = value;\n}\nfunction clearCaches() {\n  sharedData.fileContentsCache = Object.create(null);\n  sharedData.sourceMapCache = Object.create(null);\n}\n// #endregion Caches\n\nfunction handlerExec(list, internalList) {\n  return function(arg) {\n    for (var i = 0; i < list.length; i++) {\n      var ret = list[i](arg);\n      if (ret) {\n        return ret;\n      }\n    }\n    for (var i = 0; i < internalList.length; i++) {\n      var ret = internalList[i](arg);\n      if (ret) {\n        return ret;\n      }\n    }\n    return null;\n  };\n}\n\nvar retrieveFile = handlerExec(sharedData.retrieveFileHandlers, sharedData.internalRetrieveFileHandlers);\n\nsharedData.internalRetrieveFileHandlers.push(function(path) {\n  // Trim the path to make sure there is no extra whitespace.\n  path = path.trim();\n  if (/^file:/.test(path)) {\n    // existsSync/readFileSync can't handle file protocol, but once stripped, it works\n    path = path.replace(/file:\\/\\/\\/(\\w:)?/, function(protocol, drive) {\n      return drive ?\n        '' : // file:///C:/dir/file -> C:/dir/file\n        '/'; // file:///root-dir/file -> /root-dir/file\n    });\n  }\n  const key = getCacheKey(path);\n  if(hasFileContentsCacheFromKey(key)) {\n    return getFileContentsCacheFromKey(key);\n  }\n\n  var contents = '';\n  try {\n    if (!fs) {\n      // Use SJAX if we are in the browser\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', path, /** async */ false);\n      xhr.send(null);\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        contents = xhr.responseText;\n      }\n    } else if (fs.existsSync(path)) {\n      // Otherwise, use the filesystem\n      contents = fs.readFileSync(path, 'utf8');\n    }\n  } catch (er) {\n    /* ignore any errors */\n  }\n\n  return setFileContentsCache(path, contents);\n});\n\n// Support URLs relative to a directory, but be careful about a protocol prefix\n// in case we are in the browser (i.e. directories may start with \"http://\" or \"file:///\")\nfunction supportRelativeURL(file, url) {\n  if(!file) return url;\n  // given that this happens within error formatting codepath, probably best to\n  // fallback instead of throwing if anything goes wrong\n  try {\n    // if should output a URL\n    if(isAbsoluteUrl(file) || isSchemeRelativeUrl(file)) {\n        if(isAbsoluteUrl(url) || isSchemeRelativeUrl(url)) {\n            return new URL(url, file).toString();\n        }\n        if(path.isAbsolute(url)) {\n            return new URL(pathToFileURL(url), file).toString();\n        }\n        // url is relative path or URL\n        return new URL(url.replace(/\\\\/g, '/'), file).toString();\n    }\n    // if should output a path (unless URL is something like https://)\n    if(path.isAbsolute(file)) {\n        if(isFileUrl(url)) {\n            return fileURLToPath(url);\n        }\n        if(isSchemeRelativeUrl(url)) {\n            return fileURLToPath(new URL(url, 'file://'));\n        }\n        if(isAbsoluteUrl(url)) {\n            // url is a non-file URL\n            // Go with the URL\n            return url;\n        }\n        if(path.isAbsolute(url)) {\n            // Normalize at all?  decodeURI or normalize slashes?\n            return path.normalize(url);\n        }\n        // url is relative path or URL\n        return path.join(file, '..', decodeURI(url));\n    }\n    // If we get here, file is relative.\n    // Shouldn't happen since node identifies modules with absolute paths or URLs.\n    // But we can take a stab at returning something meaningful anyway.\n    if(isAbsoluteUrl(url) || isSchemeRelativeUrl(url)) {\n        return url;\n    }\n    return path.join(file, '..', url);\n  } catch(e) {\n      return url;\n  }\n}\n\n// Return pathOrUrl in the same style as matchStyleOf: either a file URL or a native path\nfunction matchStyleOfPathOrUrl(matchStyleOf, pathOrUrl) {\n  try {\n    if(isAbsoluteUrl(matchStyleOf) || isSchemeRelativeUrl(matchStyleOf)) {\n      if(isAbsoluteUrl(pathOrUrl) || isSchemeRelativeUrl(pathOrUrl)) return pathOrUrl;\n      if(path.isAbsolute(pathOrUrl)) return pathToFileURL(pathOrUrl).toString();\n    } else if(path.isAbsolute(matchStyleOf)) {\n      if(isAbsoluteUrl(pathOrUrl) || isSchemeRelativeUrl(pathOrUrl)) {\n        return fileURLToPath(new URL(pathOrUrl, 'file://'));\n      }\n    }\n    return pathOrUrl;\n  } catch(e) {\n    return pathOrUrl;\n  }\n}\n\nfunction retrieveSourceMapURL(source) {\n  var fileData;\n\n  if (isInBrowser()) {\n     try {\n       var xhr = new XMLHttpRequest();\n       xhr.open('GET', source, false);\n       xhr.send(null);\n       fileData = xhr.readyState === 4 ? xhr.responseText : null;\n\n       // Support providing a sourceMappingURL via the SourceMap header\n       var sourceMapHeader = xhr.getResponseHeader(\"SourceMap\") ||\n                             xhr.getResponseHeader(\"X-SourceMap\");\n       if (sourceMapHeader) {\n         return sourceMapHeader;\n       }\n     } catch (e) {\n     }\n  }\n\n  // Get the URL of the source map\n  fileData = retrieveFile(tryFileURLToPath(source));\n  var re = /(?:\\/\\/[@#][\\s]*sourceMappingURL=([^\\s'\"]+)[\\s]*$)|(?:\\/\\*[@#][\\s]*sourceMappingURL=([^\\s*'\"]+)[\\s]*(?:\\*\\/)[\\s]*$)/mg;\n  // Keep executing the search to find the *last* sourceMappingURL to avoid\n  // picking up sourceMappingURLs from comments, strings, etc.\n  var lastMatch, match;\n  while (match = re.exec(fileData)) lastMatch = match;\n  if (!lastMatch) return null;\n  return lastMatch[1];\n};\n\n// Can be overridden by the retrieveSourceMap option to install. Takes a\n// generated source filename; returns a {map, optional url} object, or null if\n// there is no source map.  The map field may be either a string or the parsed\n// JSON object (ie, it must be a valid argument to the SourceMapConsumer\n// constructor).\n/** @type {(source: string) => import('./source-map-support').UrlAndMap | null} */\nvar retrieveSourceMap = handlerExec(sharedData.retrieveMapHandlers, sharedData.internalRetrieveMapHandlers);\nsharedData.internalRetrieveMapHandlers.push(function(source) {\n  var sourceMappingURL = retrieveSourceMapURL(source);\n  if (!sourceMappingURL) return null;\n\n  // Read the contents of the source map\n  var sourceMapData;\n  if (reSourceMap.test(sourceMappingURL)) {\n    // Support source map URL as a data url\n    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);\n    sourceMapData = Buffer.from(rawData, \"base64\").toString();\n    sourceMappingURL = source;\n  } else {\n    // Support source map URLs relative to the source URL\n    sourceMappingURL = supportRelativeURL(source, sourceMappingURL);\n    sourceMapData = retrieveFile(tryFileURLToPath(sourceMappingURL));\n  }\n\n  if (!sourceMapData) {\n    return null;\n  }\n\n  return {\n    url: sourceMappingURL,\n    map: sourceMapData\n  };\n});\n\nfunction mapSourcePosition(position) {\n  var sourceMap = getSourceMapCache(position.source);\n  if (!sourceMap) {\n    // Call the (overrideable) retrieveSourceMap function to get the source map.\n    var urlAndMap = retrieveSourceMap(position.source);\n    if (urlAndMap) {\n      sourceMap = setSourceMapCache(position.source, {\n        url: urlAndMap.url,\n        map: new AnyMap(urlAndMap.map, urlAndMap.url)\n      });\n\n      // Overwrite trace-mapping's resolutions, because they do not handle\n      // Windows paths the way we want.\n      // TODO Remove now that windows path support was added to resolve-uri and thus trace-mapping?\n      sourceMap.map.resolvedSources = sourceMap.map.sources.map(s => supportRelativeURL(sourceMap.url, s));\n\n      // Load all sources stored inline with the source map into the file cache\n      // to pretend like they are already loaded. They may not exist on disk.\n      if (sourceMap.map.sourcesContent) {\n        sourceMap.map.resolvedSources.forEach(function(resolvedSource, i) {\n          var contents = sourceMap.map.sourcesContent[i];\n          if (contents) {\n            setFileContentsCache(resolvedSource, contents);\n          }\n        });\n      }\n    } else {\n      sourceMap = setSourceMapCache(position.source, {\n        url: null,\n        map: null\n      });\n    }\n  }\n\n  // Resolve the source URL relative to the URL of the source map\n  if (sourceMap && sourceMap.map) {\n    var originalPosition = originalPositionFor(sourceMap.map, position);\n\n    // Only return the original position if a matching line was found. If no\n    // matching line is found then we return position instead, which will cause\n    // the stack trace to print the path and line for the compiled file. It is\n    // better to give a precise location in the compiled file than a vague\n    // location in the original file.\n    if (originalPosition.source !== null) {\n      // originalPosition.source has *already* been resolved against sourceMap.url\n      // so is *already* as absolute as possible.\n      // However, we want to ensure we output in same format as input: URL or native path\n      originalPosition.source = matchStyleOfPathOrUrl(\n        position.source, originalPosition.source);\n      return originalPosition;\n    }\n  }\n\n  return position;\n}\n\n// Parses code generated by FormatEvalOrigin(), a function inside V8:\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js\nfunction mapEvalOrigin(origin) {\n  // Most eval() calls are in this format\n  var match = /^eval at ([^(]+) \\((.+):(\\d+):(\\d+)\\)$/.exec(origin);\n  if (match) {\n    var position = mapSourcePosition({\n      source: match[2],\n      line: +match[3],\n      column: match[4] - 1\n    });\n    return 'eval at ' + match[1] + ' (' + position.source + ':' +\n      position.line + ':' + (position.column + 1) + ')';\n  }\n\n  // Parse nested eval() calls using recursion\n  match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin);\n  if (match) {\n    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';\n  }\n\n  // Make sure we still return useful information if we didn't find anything\n  return origin;\n}\n\n// This is copied almost verbatim from the V8 source code at\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js\n// Update 2022-04-29:\n//    https://github.com/v8/v8/blob/98f6f100c5ab8e390e51422747c4ef644d5ac6f2/src/builtins/builtins-callsite.cc#L175-L179\n//    https://github.com/v8/v8/blob/98f6f100c5ab8e390e51422747c4ef644d5ac6f2/src/objects/call-site-info.cc#L795-L804\n//    https://github.com/v8/v8/blob/98f6f100c5ab8e390e51422747c4ef644d5ac6f2/src/objects/call-site-info.cc#L717-L750\n// The implementation of wrapCallSite() used to just forward to the actual source\n// code of CallSite.prototype.toString but unfortunately a new release of V8\n// did something to the prototype chain and broke the shim. The only fix I\n// could find was copy/paste.\nfunction CallSiteToString() {\n  var fileName;\n  var fileLocation = \"\";\n  if (this.isNative()) {\n    fileLocation = \"native\";\n  } else {\n    fileName = this.getScriptNameOrSourceURL();\n    if (!fileName && this.isEval()) {\n      fileLocation = this.getEvalOrigin();\n      fileLocation += \", \";  // Expecting source position to follow.\n    }\n\n    if (fileName) {\n      fileLocation += fileName;\n    } else {\n      // Source code does not originate from a file and is not native, but we\n      // can still get the source position inside the source string, e.g. in\n      // an eval string.\n      fileLocation += \"<anonymous>\";\n    }\n    var lineNumber = this.getLineNumber();\n    if (lineNumber != null) {\n      fileLocation += \":\" + lineNumber;\n      var columnNumber = this.getColumnNumber();\n      if (columnNumber) {\n        fileLocation += \":\" + columnNumber;\n      }\n    }\n  }\n\n  var line = \"\";\n  var isAsync = this.isAsync ? this.isAsync() : false;\n  if(isAsync) {\n    line += 'async ';\n    var isPromiseAll = this.isPromiseAll ? this.isPromiseAll() : false;\n    var isPromiseAny = this.isPromiseAny ? this.isPromiseAny() : false;\n    if(isPromiseAny || isPromiseAll) {\n      line += isPromiseAll ? 'Promise.all (index ' : 'Promise.any (index ';\n      var promiseIndex = this.getPromiseIndex();\n      line += promiseIndex + ')';\n    }\n  }\n  var functionName = this.getFunctionName();\n  var addSuffix = true;\n  var isConstructor = this.isConstructor();\n  var isMethodCall = !(this.isToplevel() || isConstructor);\n  if (isMethodCall) {\n    var typeName = this.getTypeName();\n    // Fixes shim to be backward compatable with Node v0 to v4\n    if (typeName === \"[object Object]\") {\n      typeName = \"null\";\n    }\n    var methodName = this.getMethodName();\n    if (functionName) {\n      if (typeName && functionName.indexOf(typeName) != 0) {\n        line += typeName + \".\";\n      }\n      line += functionName;\n      if (methodName && functionName.indexOf(\".\" + methodName) != functionName.length - methodName.length - 1) {\n        line += \" [as \" + methodName + \"]\";\n      }\n    } else {\n      line += typeName + \".\" + (methodName || \"<anonymous>\");\n    }\n  } else if (isConstructor) {\n    line += \"new \" + (functionName || \"<anonymous>\");\n  } else if (functionName) {\n    line += functionName;\n  } else {\n    line += fileLocation;\n    addSuffix = false;\n  }\n  if (addSuffix) {\n    line += \" (\" + fileLocation + \")\";\n  }\n  return line;\n}\n\nfunction cloneCallSite(frame) {\n  var object = {};\n  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {\n    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];\n  });\n  object.toString = CallSiteToString;\n  return object;\n}\n\nfunction wrapCallSite(frame, state) {\n  // provides interface backward compatibility\n  if (state === undefined) {\n    state = { nextPosition: null, curPosition: null }\n  }\n  if(frame.isNative()) {\n    state.curPosition = null;\n    return frame;\n  }\n\n  // Most call sites will return the source file from getFileName(), but code\n  // passed to eval() ending in \"//# sourceURL=...\" will return the source file\n  // from getScriptNameOrSourceURL() instead\n  var source = frame.getFileName() || frame.getScriptNameOrSourceURL();\n  if (source) {\n    // v8 does not expose its internal isWasm, etc methods, so we do this instead.\n    if(source.startsWith('wasm://')) {\n      state.curPosition = null;\n      return frame;\n    }\n\n    var line = frame.getLineNumber();\n    var column = frame.getColumnNumber() - 1;\n\n    // Fix position in Node where some (internal) code is prepended.\n    // See https://github.com/evanw/node-source-map-support/issues/36\n    // Header removed in node at ^10.16 || >=11.11.0\n    // v11 is not an LTS candidate, we can just test the one version with it.\n    // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11\n    var noHeader = /^v(10\\.1[6-9]|10\\.[2-9][0-9]|10\\.[0-9]{3,}|1[2-9]\\d*|[2-9]\\d|\\d{3,}|11\\.11)/;\n    var headerLength = noHeader.test(process.version) ? 0 : 62;\n    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {\n      column -= headerLength;\n    }\n\n    var position = mapSourcePosition({\n      source: source,\n      line: line,\n      column: column\n    });\n    state.curPosition = position;\n    frame = cloneCallSite(frame);\n    var originalFunctionName = frame.getFunctionName;\n    frame.getFunctionName = function() {\n      if (state.nextPosition == null) {\n        return originalFunctionName();\n      }\n      return state.nextPosition.name || originalFunctionName();\n    };\n    frame.getFileName = function() { return position.source; };\n    frame.getLineNumber = function() { return position.line; };\n    frame.getColumnNumber = function() { return position.column + 1; };\n    frame.getScriptNameOrSourceURL = function() { return position.source; };\n    return frame;\n  }\n\n  // Code called using eval() needs special handling\n  var origin = frame.isEval() && frame.getEvalOrigin();\n  if (origin) {\n    origin = mapEvalOrigin(origin);\n    frame = cloneCallSite(frame);\n    frame.getEvalOrigin = function() { return origin; };\n    return frame;\n  }\n\n  // If we get here then we were unable to change the source position\n  return frame;\n}\n\nvar kIsNodeError = undefined;\ntry {\n  // Get a deliberate ERR_INVALID_ARG_TYPE\n  // TODO is there a better way to reliably get an instance of NodeError?\n  path.resolve(123);\n} catch(e) {\n  const symbols = Object.getOwnPropertySymbols(e);\n  const symbol = symbols.find(function (s) {return s.toString().indexOf('kIsNodeError') >= 0});\n  if(symbol) kIsNodeError = symbol;\n}\n\nconst ErrorPrototypeToString = (err) =>Error.prototype.toString.call(err);\n\n/** @param {HookState} hookState */\nfunction createPrepareStackTrace(hookState) {\n  return prepareStackTrace;\n\n  // This function is part of the V8 stack trace API, for more info see:\n  // https://v8.dev/docs/stack-trace-api\n  function prepareStackTrace(error, stack) {\n    if(!hookState.enabled) return hookState.originalValue.apply(this, arguments);\n\n    if (sharedData.emptyCacheBetweenOperations) {\n      clearCaches();\n    }\n\n    // node gives its own errors special treatment.  Mimic that behavior\n    // https://github.com/nodejs/node/blob/3cbaabc4622df1b4009b9d026a1a970bdbae6e89/lib/internal/errors.js#L118-L128\n    // https://github.com/nodejs/node/pull/39182\n    var errorString;\n    if (kIsNodeError) {\n      if(kIsNodeError in error) {\n        errorString = `${error.name} [${error.code}]: ${error.message}`;\n      } else {\n        errorString = ErrorPrototypeToString(error);\n      }\n    } else {\n      var name = error.name || 'Error';\n      var message = error.message || '';\n      errorString = message ? name + \": \" + message : name;\n    }\n\n    var state = { nextPosition: null, curPosition: null };\n    var processedStack = [];\n    for (var i = stack.length - 1; i >= 0; i--) {\n      processedStack.push('\\n    at ' + wrapCallSite(stack[i], state));\n      state.nextPosition = state.curPosition;\n    }\n    state.curPosition = state.nextPosition = null;\n    return errorString + processedStack.reverse().join('');\n  }\n}\n\n// Generate position and snippet of original source with pointer\nfunction getErrorSource(error) {\n  var match = /\\n    at [^(]+ \\((.*):(\\d+):(\\d+)\\)/.exec(error.stack);\n  if (match) {\n    var source = match[1];\n    var line = +match[2];\n    var column = +match[3];\n\n    // Support the inline sourceContents inside the source map\n    var contents = getFileContentsCache(source);\n\n    const sourceAsPath = tryFileURLToPath(source);\n\n    // Support files on disk\n    if (!contents && fs && fs.existsSync(sourceAsPath)) {\n      try {\n        contents = fs.readFileSync(sourceAsPath, 'utf8');\n      } catch (er) {\n        contents = '';\n      }\n    }\n\n    // Format the line from the original source code like node does\n    if (contents) {\n      var code = contents.split(/(?:\\r\\n|\\r|\\n)/)[line - 1];\n      if (code) {\n        return source + ':' + line + '\\n' + code + '\\n' +\n          new Array(column).join(' ') + '^';\n      }\n    }\n  }\n  return null;\n}\n\nfunction printFatalErrorUponExit (error) {\n  var source = getErrorSource(error);\n\n  // Ensure error is printed synchronously and not truncated\n  if (process.stderr._handle && process.stderr._handle.setBlocking) {\n    process.stderr._handle.setBlocking(true);\n  }\n\n  if (source) {\n    console.error(source);\n  }\n\n  // Matches node's behavior for colorized output\n  console.error(\n    util.inspect(error, {\n      customInspect: false,\n      colors: process.stderr.isTTY\n    })\n  );\n}\n\nfunction shimEmitUncaughtException () {\n  const originalValue = process.emit;\n  var hook = sharedData.processEmitHook = {\n    enabled: true,\n    originalValue,\n    installedValue: undefined\n  };\n  var isTerminatingDueToFatalException = false;\n  var fatalException;\n\n  process.emit = sharedData.processEmitHook.installedValue = function (type) {\n    const hadListeners = originalValue.apply(this, arguments);\n    if(hook.enabled) {\n      if (type === 'uncaughtException' && !hadListeners) {\n        isTerminatingDueToFatalException = true;\n        fatalException = arguments[1];\n        process.exit(1);\n      }\n      if (type === 'exit' && isTerminatingDueToFatalException) {\n        printFatalErrorUponExit(fatalException);\n      }\n    }\n    return hadListeners;\n  };\n}\n\nvar originalRetrieveFileHandlers = sharedData.retrieveFileHandlers.slice(0);\nvar originalRetrieveMapHandlers = sharedData.retrieveMapHandlers.slice(0);\n\nexports.wrapCallSite = wrapCallSite;\nexports.getErrorSource = getErrorSource;\nexports.mapSourcePosition = mapSourcePosition;\nexports.retrieveSourceMap = retrieveSourceMap;\n\nexports.install = function(options) {\n  options = options || {};\n\n  if (options.environment) {\n    environment = options.environment;\n    if ([\"node\", \"browser\", \"auto\"].indexOf(environment) === -1) {\n      throw new Error(\"environment \" + environment + \" was unknown. Available options are {auto, browser, node}\")\n    }\n  }\n\n  // Use dynamicRequire to avoid including in browser bundles\n  var Module = dynamicRequire(module, 'module');\n\n  // Redirect subsequent imports of \"source-map-support\"\n  // to this package\n  const {redirectConflictingLibrary = true, onConflictingLibraryRedirect} = options;\n  if(redirectConflictingLibrary) {\n    if (!sharedData.moduleResolveFilenameHook) {\n      const originalValue = Module._resolveFilename;\n      const moduleResolveFilenameHook = sharedData.moduleResolveFilenameHook = {\n        enabled: true,\n        originalValue,\n        installedValue: undefined,\n      }\n      Module._resolveFilename = sharedData.moduleResolveFilenameHook.installedValue = function (request, parent, isMain, options) {\n        if (moduleResolveFilenameHook.enabled) {\n          // Match all source-map-support entrypoints: source-map-support, source-map-support/register\n          let requestRedirect;\n          if (request === 'source-map-support') {\n            requestRedirect = './';\n          } else if (request === 'source-map-support/register') {\n            requestRedirect = './register';\n          }\n\n          if (requestRedirect !== undefined) {\n              const newRequest = require.resolve(requestRedirect);\n              for (const cb of sharedData.onConflictingLibraryRedirectArr) {\n                cb(request, parent, isMain, options, newRequest);\n              }\n              request = newRequest;\n          }\n        }\n        \n        return originalValue.call(this, request, parent, isMain, options);\n      }\n    } \n    if (onConflictingLibraryRedirect) {\n      sharedData.onConflictingLibraryRedirectArr.push(onConflictingLibraryRedirect);\n    }\n  }\n\n  // Allow sources to be found by methods other than reading the files\n  // directly from disk.\n  if (options.retrieveFile) {\n    if (options.overrideRetrieveFile) {\n      sharedData.retrieveFileHandlers.length = 0;\n    }\n\n    sharedData.retrieveFileHandlers.unshift(options.retrieveFile);\n  }\n\n  // Allow source maps to be found by methods other than reading the files\n  // directly from disk.\n  if (options.retrieveSourceMap) {\n    if (options.overrideRetrieveSourceMap) {\n      sharedData.retrieveMapHandlers.length = 0;\n    }\n\n    sharedData.retrieveMapHandlers.unshift(options.retrieveSourceMap);\n  }\n\n  // Support runtime transpilers that include inline source maps\n  if (options.hookRequire && !isInBrowser()) {\n    var $compile = Module.prototype._compile;\n\n    if (!$compile.__sourceMapSupport) {\n      Module.prototype._compile = function(content, filename) {\n        setFileContentsCache(filename, content);\n        setSourceMapCache(filename, undefined);\n        return $compile.call(this, content, filename);\n      };\n\n      Module.prototype._compile.__sourceMapSupport = true;\n    }\n  }\n\n  // Configure options\n  if (!sharedData.emptyCacheBetweenOperations) {\n    sharedData.emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?\n      options.emptyCacheBetweenOperations : false;\n  }\n\n\n  // Install the error reformatter\n  if (!sharedData.errorPrepareStackTraceHook) {\n    const originalValue = Error.prepareStackTrace;\n    sharedData.errorPrepareStackTraceHook = {\n      enabled: true,\n      originalValue,\n      installedValue: undefined\n    };\n    Error.prepareStackTrace = sharedData.errorPrepareStackTraceHook.installedValue = createPrepareStackTrace(sharedData.errorPrepareStackTraceHook);\n  }\n\n  if (!sharedData.processEmitHook) {\n    var installHandler = 'handleUncaughtExceptions' in options ?\n      options.handleUncaughtExceptions : true;\n\n    // Do not override 'uncaughtException' with our own handler in Node.js\n    // Worker threads. Workers pass the error to the main thread as an event,\n    // rather than printing something to stderr and exiting.\n    try {\n      // We need to use `dynamicRequire` because `require` on it's own will be optimized by WebPack/Browserify.\n      var worker_threads = dynamicRequire(module, 'worker_threads');\n      if (worker_threads.isMainThread === false) {\n        installHandler = false;\n      }\n    } catch(e) {}\n\n    // Provide the option to not install the uncaught exception handler. This is\n    // to support other uncaught exception handlers (in test frameworks, for\n    // example). If this handler is not installed and there are no other uncaught\n    // exception handlers, uncaught exceptions will be caught by node's built-in\n    // exception handler and the process will still be terminated. However, the\n    // generated JavaScript code will be shown above the stack trace instead of\n    // the original source code.\n    if (installHandler && hasGlobalProcessEventEmitter()) {\n      shimEmitUncaughtException();\n    }\n  }\n};\n\nexports.uninstall = function() {\n  if(sharedData.processEmitHook) {\n    // Disable behavior\n    sharedData.processEmitHook.enabled = false;\n    // If possible, remove our hook function.  May not be possible if subsequent third-party hooks have wrapped around us.\n    if(process.emit === sharedData.processEmitHook.installedValue) {\n      process.emit = sharedData.processEmitHook.originalValue;\n    }\n    sharedData.processEmitHook = undefined;\n  }\n  if(sharedData.errorPrepareStackTraceHook) {\n    // Disable behavior\n    sharedData.errorPrepareStackTraceHook.enabled = false;\n    // If possible or necessary, remove our hook function.\n    // In vanilla environments, prepareStackTrace is `undefined`.\n    // We cannot delegate to `undefined` the way we can to a function w/`.apply()`; our only option is to remove the function.\n    // If we are the *first* hook installed, and another was installed on top of us, we have no choice but to remove both.\n    if(Error.prepareStackTrace === sharedData.errorPrepareStackTraceHook.installedValue || typeof sharedData.errorPrepareStackTraceHook.originalValue !== 'function') {\n      Error.prepareStackTrace = sharedData.errorPrepareStackTraceHook.originalValue;\n    }\n    sharedData.errorPrepareStackTraceHook = undefined;\n  }\n  if (sharedData.moduleResolveFilenameHook) {\n    // Disable behavior\n    sharedData.moduleResolveFilenameHook.enabled = false;\n    // If possible, remove our hook function.  May not be possible if subsequent third-party hooks have wrapped around us.\n    var Module = dynamicRequire(module, 'module');\n    if(Module._resolveFilename === sharedData.moduleResolveFilenameHook.installedValue) {\n      Module._resolveFilename = sharedData.moduleResolveFilenameHook.originalValue;\n    }\n    sharedData.moduleResolveFilenameHook = undefined;\n  }\n  sharedData.onConflictingLibraryRedirectArr.length = 0;\n}\n\nexports.resetRetrieveHandlers = function() {\n  sharedData.retrieveFileHandlers.length = 0;\n  sharedData.retrieveMapHandlers.length = 0;\n}\n",
    "package.json": "{\n  \"name\": \"@cspotcode/source-map-support\",\n  \"description\": \"Fixes stack traces for files with source maps\",\n  \"version\": \"0.8.1\",\n  \"main\": \"./source-map-support.js\",\n  \"types\": \"./source-map-support.d.ts\",\n  \"scripts\": {\n    \"build\": \"node build.js\",\n    \"serve-tests\": \"http-server -p 1336\",\n    \"test\": \"mocha\"\n  },\n  \"files\": [\n    \"/register.d.ts\",\n    \"/register.js\",\n    \"/register-hook-require.d.ts\",\n    \"/register-hook-require.js\",\n    \"/source-map-support.d.ts\",\n    \"/source-map-support.js\",\n    \"/browser-source-map-support.js\"\n  ],\n  \"dependencies\": {\n    \"@jridgewell/trace-mapping\": \"0.3.9\"\n  },\n  \"devDependencies\": {\n    \"@types/lodash\": \"^4.14.182\",\n    \"browserify\": \"^4.2.3\",\n    \"coffeescript\": \"^1.12.7\",\n    \"http-server\": \"^0.11.1\",\n    \"lodash\": \"^4.17.21\",\n    \"mocha\": \"^3.5.3\",\n    \"semver\": \"^7.3.7\",\n    \"source-map\": \"0.6.1\",\n    \"webpack\": \"^1.15.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/cspotcode/node-source-map-support\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/cspotcode/node-source-map-support/issues\"\n  },\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"volta\": {\n    \"node\": \"16.11.0\",\n    \"npm\": \"7.24.2\"\n  }\n}\n"
  },
  "externals": [
    "@jridgewell/trace-mapping",
    "path",
    "url",
    "util"
  ]
}
