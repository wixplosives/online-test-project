{
  "packageName": "resolve-from",
  "packageVersion": "4.0.0",
  "request": "resolve-from",
  "resolved": "index.js",
  "files": {
    "index.js": "'use strict';\nconst path = require('path');\nconst Module = require('module');\nconst fs = require('fs');\n\nconst resolveFrom = (fromDir, moduleId, silent) => {\n\tif (typeof fromDir !== 'string') {\n\t\tthrow new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDir}\\``);\n\t}\n\n\tif (typeof moduleId !== 'string') {\n\t\tthrow new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``);\n\t}\n\n\ttry {\n\t\tfromDir = fs.realpathSync(fromDir);\n\t} catch (err) {\n\t\tif (err.code === 'ENOENT') {\n\t\t\tfromDir = path.resolve(fromDir);\n\t\t} else if (silent) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tconst fromFile = path.join(fromDir, 'noop.js');\n\n\tconst resolveFileName = () => Module._resolveFilename(moduleId, {\n\t\tid: fromFile,\n\t\tfilename: fromFile,\n\t\tpaths: Module._nodeModulePaths(fromDir)\n\t});\n\n\tif (silent) {\n\t\ttry {\n\t\t\treturn resolveFileName();\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn resolveFileName();\n};\n\nmodule.exports = (fromDir, moduleId) => resolveFrom(fromDir, moduleId);\nmodule.exports.silent = (fromDir, moduleId) => resolveFrom(fromDir, moduleId, true);\n",
    "package.json": "{\n\t\"name\": \"resolve-from\",\n\t\"version\": \"4.0.0\",\n\t\"description\": \"Resolve the path of a module like `require.resolve()` but from a given path\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/resolve-from\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"sindresorhus.com\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=4\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"xo && ava\"\n\t},\n\t\"files\": [\n\t\t\"index.js\"\n\t],\n\t\"keywords\": [\n\t\t\"require\",\n\t\t\"resolve\",\n\t\t\"path\",\n\t\t\"module\",\n\t\t\"from\",\n\t\t\"like\",\n\t\t\"import\"\n\t],\n\t\"devDependencies\": {\n\t\t\"ava\": \"*\",\n\t\t\"xo\": \"*\"\n\t}\n}\n"
  },
  "externals": [
    "path",
    "module",
    "fs"
  ]
}
