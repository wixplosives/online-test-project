{
  "packageName": "thenify-all",
  "packageVersion": "1.6.0",
  "request": "thenify-all",
  "resolved": "index.js",
  "files": {
    "index.js": "\nvar thenify = require('thenify')\n\nmodule.exports = thenifyAll\nthenifyAll.withCallback = withCallback\nthenifyAll.thenify = thenify\n\n/**\n * Promisifies all the selected functions in an object.\n *\n * @param {Object} source the source object for the async functions\n * @param {Object} [destination] the destination to set all the promisified methods\n * @param {Array} [methods] an array of method names of `source`\n * @return {Object}\n * @api public\n */\n\nfunction thenifyAll(source, destination, methods) {\n  return promisifyAll(source, destination, methods, thenify)\n}\n\n/**\n * Promisifies all the selected functions in an object and backward compatible with callback.\n *\n * @param {Object} source the source object for the async functions\n * @param {Object} [destination] the destination to set all the promisified methods\n * @param {Array} [methods] an array of method names of `source`\n * @return {Object}\n * @api public\n */\n\nfunction withCallback(source, destination, methods) {\n  return promisifyAll(source, destination, methods, thenify.withCallback)\n}\n\nfunction promisifyAll(source, destination, methods, promisify) {\n  if (!destination) {\n    destination = {};\n    methods = Object.keys(source)\n  }\n\n  if (Array.isArray(destination)) {\n    methods = destination\n    destination = {}\n  }\n\n  if (!methods) {\n    methods = Object.keys(source)\n  }\n\n  if (typeof source === 'function') destination = promisify(source)\n\n  methods.forEach(function (name) {\n    // promisify only if it's a function\n    if (typeof source[name] === 'function') destination[name] = promisify(source[name])\n  })\n\n  // proxy the rest\n  Object.keys(source).forEach(function (name) {\n    if (deprecated(source, name)) return\n    if (destination[name]) return\n    destination[name] = source[name]\n  })\n\n  return destination\n}\n\nfunction deprecated(source, name) {\n  var desc = Object.getOwnPropertyDescriptor(source, name)\n  if (!desc || !desc.get) return false\n  if (desc.get.name === 'deprecated') return true\n  return false\n}\n",
    "package.json": "{\n  \"name\": \"thenify-all\",\n  \"description\": \"Promisifies all the selected functions in an object\",\n  \"version\": \"1.6.0\",\n  \"author\": \"Jonathan Ong <me@jongleberry.com> (http://jongleberry.com)\",\n  \"license\": \"MIT\",\n  \"repository\": \"thenables/thenify-all\",\n  \"dependencies\": {\n    \"thenify\": \">= 3.1.0 < 4\"\n  },\n  \"devDependencies\": {\n    \"bluebird\": \"2\",\n    \"istanbul\": \"0\",\n    \"mocha\": \"2\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha --reporter spec\",\n    \"test-cov\": \"istanbul cover node_modules/.bin/_mocha -- --reporter dot\",\n    \"test-travis\": \"istanbul cover node_modules/.bin/_mocha --report lcovonly -- --reporter dot\"\n  },\n  \"keywords\": [\n    \"promisify\",\n    \"promise\",\n    \"thenify\",\n    \"then\",\n    \"es6\"\n  ],\n  \"files\": [\n    \"index.js\"\n  ],\n  \"engines\": {\n    \"node\": \">=0.8\"\n  }\n}\n"
  },
  "externals": [
    "thenify"
  ]
}
