{
  "packageName": "postcss-load-config",
  "packageVersion": "4.0.1",
  "request": "postcss-load-config",
  "resolved": "src/index.js",
  "files": {
    "src/index.js": "'use strict';\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nconst resolve = require('path').resolve;\nconst url = require('url');\nconst config = require('lilconfig');\nconst yaml = require('yaml');\nconst loadOptions = require('./options.js');\nconst loadPlugins = require('./plugins.js');\n/* istanbul ignore next */\nconst interopRequireDefault = (obj) => obj && obj.__esModule ? obj : { default: obj };\n/**\n * Process the result from cosmiconfig\n *\n * @param  {Object} ctx Config Context\n * @param  {Object} result Cosmiconfig result\n *\n * @return {Object} PostCSS Config\n */\nconst processResult = (ctx, result) => {\n    const file = result.filepath || '';\n    let config = interopRequireDefault(result.config).default || {};\n    if (typeof config === 'function') {\n        config = config(ctx);\n    }\n    else {\n        config = Object.assign({}, config, ctx);\n    }\n    if (!config.plugins) {\n        config.plugins = [];\n    }\n    return {\n        plugins: loadPlugins(config, file),\n        options: loadOptions(config, file),\n        file\n    };\n};\n/**\n * Builds the Config Context\n *\n * @param  {Object} ctx Config Context\n *\n * @return {Object} Config Context\n */\nconst createContext = (ctx) => {\n    /**\n     * @type {Object}\n     *\n     * @prop {String} cwd=process.cwd() Config search start location\n     * @prop {String} env=process.env.NODE_ENV Config Enviroment, will be set to `development` by `postcss-load-config` if `process.env.NODE_ENV` is `undefined`\n     */\n    ctx = Object.assign({\n        cwd: process.cwd(),\n        env: process.env.NODE_ENV\n    }, ctx);\n    if (!ctx.env) {\n        process.env.NODE_ENV = 'development';\n    }\n    return ctx;\n};\nconst importDefault = async (filepath) => {\n    const module = await Promise.resolve(`${url.pathToFileURL(filepath).href}`).then(s => __importStar(require(s)));\n    return module.default;\n};\nconst addTypeScriptLoader = (options = {}, loader) => {\n    const moduleName = 'postcss';\n    return {\n        ...options,\n        searchPlaces: [\n            ...(options.searchPlaces || []),\n            'package.json',\n            `.${moduleName}rc`,\n            `.${moduleName}rc.json`,\n            `.${moduleName}rc.yaml`,\n            `.${moduleName}rc.yml`,\n            `.${moduleName}rc.ts`,\n            `.${moduleName}rc.js`,\n            `.${moduleName}rc.cjs`,\n            `.${moduleName}rc.mjs`,\n            `${moduleName}.config.ts`,\n            `${moduleName}.config.js`,\n            `${moduleName}.config.cjs`,\n            `${moduleName}.config.mjs`\n        ],\n        loaders: {\n            ...options.loaders,\n            '.yaml': (filepath, content) => yaml.parse(content),\n            '.yml': (filepath, content) => yaml.parse(content),\n            '.js': importDefault,\n            '.cjs': importDefault,\n            '.mjs': importDefault,\n            '.ts': loader\n        }\n    };\n};\nconst withTypeScriptLoader = (rcFunc) => {\n    return (ctx, path, options) => {\n        return rcFunc(ctx, path, addTypeScriptLoader(options, (configFile) => {\n            let registerer = { enabled() { } };\n            try {\n                // Register TypeScript compiler instance\n                registerer = require('ts-node').register();\n                return require(configFile);\n            }\n            catch (err) {\n                if (err.code === 'MODULE_NOT_FOUND') {\n                    throw new Error(`'ts-node' is required for the TypeScript configuration files. Make sure it is installed\\nError: ${err.message}`);\n                }\n                throw err;\n            }\n            finally {\n                registerer.enabled(false);\n            }\n        }));\n    };\n};\n/**\n * Load Config\n *\n * @method rc\n *\n * @param  {Object} ctx Config Context\n * @param  {String} path Config Path\n * @param  {Object} options Config Options\n *\n * @return {Promise} config PostCSS Config\n */\nconst rc = withTypeScriptLoader((ctx, path, options) => {\n    /**\n     * @type {Object} The full Config Context\n     */\n    ctx = createContext(ctx);\n    /**\n     * @type {String} `process.cwd()`\n     */\n    path = path ? resolve(path) : process.cwd();\n    return config.lilconfig('postcss', options)\n        .search(path)\n        .then((result) => {\n        if (!result) {\n            throw new Error(`No PostCSS Config found in: ${path}`);\n        }\n        return processResult(ctx, result);\n    });\n});\n/**\n * Autoload Config for PostCSS\n *\n * @author Michael Ciniawsky @michael-ciniawsky <michael.ciniawsky@gmail.com>\n * @license MIT\n *\n * @module postcss-load-config\n * @version 2.1.0\n *\n * @requires comsiconfig\n * @requires ./options\n * @requires ./plugins\n */\nmodule.exports = rc;\n",
    "package.json": "{\n  \"name\": \"postcss-load-config\",\n  \"version\": \"4.0.1\",\n  \"description\": \"Autoload Config for PostCSS\",\n  \"main\": \"src/index.js\",\n  \"types\": \"src/index.d.ts\",\n  \"files\": [\n    \"src\"\n  ],\n  \"engines\": {\n    \"node\": \">= 14\"\n  },\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/postcss/\"\n  },\n  \"dependencies\": {\n    \"lilconfig\": \"^2.0.5\",\n    \"yaml\": \"^2.1.1\"\n  },\n  \"peerDependencies\": {\n    \"postcss\": \">=8.0.9\",\n    \"ts-node\": \">=9.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"ts-node\": {\n      \"optional\": true\n    },\n    \"postcss\": {\n      \"optional\": true\n    }\n  },\n  \"keywords\": [\n    \"postcss\",\n    \"postcssrc\",\n    \"postcss.config.js\"\n  ],\n  \"author\": \"Michael Ciniawky <michael.ciniawsky@gmail.com>\",\n  \"contributors\": [\n    \"Ryan Dunckel\",\n    \"Mateusz Derks\",\n    \"Dalton Santos\",\n    \"Patrick Gilday\",\n    \"FranÃ§ois Wouts\"\n  ],\n  \"repository\": \"postcss/postcss-load-config\",\n  \"license\": \"MIT\"\n}\n",
    "src/options.js": "'use strict'\n\nconst req = require('./req.js')\n\n/**\n * Load Options\n *\n * @private\n * @method options\n *\n * @param  {Object} config  PostCSS Config\n *\n * @return {Object} options PostCSS Options\n */\nconst options = (config, file) => {\n  if (config.parser && typeof config.parser === 'string') {\n    try {\n      config.parser = req(config.parser, file)\n    } catch (err) {\n      throw new Error(`Loading PostCSS Parser failed: ${err.message}\\n\\n(@${file})`)\n    }\n  }\n\n  if (config.syntax && typeof config.syntax === 'string') {\n    try {\n      config.syntax = req(config.syntax, file)\n    } catch (err) {\n      throw new Error(`Loading PostCSS Syntax failed: ${err.message}\\n\\n(@${file})`)\n    }\n  }\n\n  if (config.stringifier && typeof config.stringifier === 'string') {\n    try {\n      config.stringifier = req(config.stringifier, file)\n    } catch (err) {\n      throw new Error(`Loading PostCSS Stringifier failed: ${err.message}\\n\\n(@${file})`)\n    }\n  }\n\n  if (config.plugins) {\n    delete config.plugins\n  }\n\n  return config\n}\n\nmodule.exports = options\n",
    "src/plugins.js": "'use strict'\n\nconst req = require('./req.js')\n\n/**\n * Plugin Loader\n *\n * @private\n * @method load\n *\n * @param  {String} plugin PostCSS Plugin Name\n * @param  {Object} options PostCSS Plugin Options\n *\n * @return {Function} PostCSS Plugin\n */\nconst load = (plugin, options, file) => {\n  try {\n    if (\n      options === null ||\n      options === undefined ||\n      Object.keys(options).length === 0\n    ) {\n      return req(plugin, file)\n    } else {\n      return req(plugin, file)(options)\n    }\n  } catch (err) {\n    throw new Error(`Loading PostCSS Plugin failed: ${err.message}\\n\\n(@${file})`)\n  }\n}\n\n/**\n * Load Plugins\n *\n * @private\n * @method plugins\n *\n * @param {Object} config PostCSS Config Plugins\n *\n * @return {Array} plugins PostCSS Plugins\n */\nconst plugins = (config, file) => {\n  let plugins = []\n\n  if (Array.isArray(config.plugins)) {\n    plugins = config.plugins.filter(Boolean)\n  } else {\n    plugins = Object.keys(config.plugins)\n      .filter((plugin) => {\n        return config.plugins[plugin] !== false ? plugin : ''\n      })\n      .map((plugin) => {\n        return load(plugin, config.plugins[plugin], file)\n      })\n  }\n\n  if (plugins.length && plugins.length > 0) {\n    plugins.forEach((plugin, i) => {\n      if (plugin.default) {\n        plugin = plugin.default\n      }\n\n      if (plugin.postcss === true) {\n        plugin = plugin()\n      } else if (plugin.postcss) {\n        plugin = plugin.postcss\n      }\n\n      if (\n        // eslint-disable-next-line\n        !(\n          (typeof plugin === 'object' && Array.isArray(plugin.plugins)) ||\n          (typeof plugin === 'object' && plugin.postcssPlugin) ||\n          (typeof plugin === 'function')\n        )\n      ) {\n        throw new TypeError(`Invalid PostCSS Plugin found at: plugins[${i}]\\n\\n(@${file})`)\n      }\n    })\n  }\n\n  return plugins\n}\n\nmodule.exports = plugins\n",
    "src/req.js": "// eslint-disable-next-line n/no-deprecated-api\nconst { createRequire, createRequireFromPath } = require('module')\n\nfunction req (name, rootFile) {\n  const create = createRequire || createRequireFromPath\n  const require = create(rootFile)\n  return require(name)\n}\n\nmodule.exports = req\n"
  },
  "externals": [
    "path",
    "url",
    "lilconfig",
    "yaml",
    "module"
  ]
}
