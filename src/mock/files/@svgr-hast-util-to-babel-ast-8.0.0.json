{
  "packageName": "@svgr/hast-util-to-babel-ast",
  "packageVersion": "8.0.0",
  "request": "@svgr/hast-util-to-babel-ast",
  "resolved": "dist/index.js",
  "files": {
    "dist/index.js": "'use strict';\n\nvar t = require('@babel/types');\nvar entities = require('entities');\n\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\n\nvar t__namespace = /*#__PURE__*/_interopNamespaceDefault(t);\n\nconst one = (h, node, parent) => {\n  const type = node && node.type;\n  const fn = h.handlers[type];\n  if (!type) {\n    throw new Error(`Expected node, got \\`${node}\\``);\n  }\n  if (!fn) {\n    throw new Error(`Node of type ${type} is unknown`);\n  }\n  return fn(h, node, parent);\n};\n\nconst all = (helpers, parent) => {\n  const nodes = parent.children || [];\n  const { length } = nodes;\n  const values = [];\n  let index = -1;\n  while (++index < length) {\n    const node = nodes[index];\n    if (typeof node !== \"string\") {\n      const result = one(helpers, node, parent);\n      values.push(result);\n    }\n  }\n  return values.filter(Boolean);\n};\n\nconst isNumeric = (value) => {\n  return !Number.isNaN(value - parseFloat(value));\n};\nconst hyphenToCamelCase = (string) => {\n  return string.replace(/-(.)/g, (_, chr) => chr.toUpperCase());\n};\nconst trimEnd = (haystack, needle) => {\n  return haystack.endsWith(needle) ? haystack.slice(0, -needle.length) : haystack;\n};\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, (match) => `-${match.toLowerCase()}`);\n};\nconst SPACES_REGEXP = /[\\t\\r\\n\\u0085\\u2028\\u2029]+/g;\nconst replaceSpaces = (str) => {\n  return str.replace(SPACES_REGEXP, \" \");\n};\n\nconst PX_REGEX = /^\\d+px$/;\nconst MS_REGEX = /^-ms-/;\nconst VAR_REGEX = /^--/;\nconst isConvertiblePixelValue = (value) => {\n  return PX_REGEX.test(value);\n};\nconst formatKey = (key) => {\n  if (VAR_REGEX.test(key)) {\n    return t__namespace.stringLiteral(key);\n  }\n  key = key.toLowerCase();\n  if (MS_REGEX.test(key))\n    key = key.substr(1);\n  return t__namespace.identifier(hyphenToCamelCase(key));\n};\nconst formatValue = (value) => {\n  if (isNumeric(value))\n    return t__namespace.numericLiteral(Number(value));\n  if (isConvertiblePixelValue(value))\n    return t__namespace.numericLiteral(Number(trimEnd(value, \"px\")));\n  return t__namespace.stringLiteral(value);\n};\nconst stringToObjectStyle = (rawStyle) => {\n  const entries = rawStyle.split(\";\");\n  const properties = [];\n  let index = -1;\n  while (++index < entries.length) {\n    const entry = entries[index];\n    const style = entry.trim();\n    const firstColon = style.indexOf(\":\");\n    const value = style.substr(firstColon + 1).trim();\n    const key = style.substr(0, firstColon);\n    if (key !== \"\") {\n      const property = t__namespace.objectProperty(formatKey(key), formatValue(value));\n      properties.push(property);\n    }\n  }\n  return t__namespace.objectExpression(properties);\n};\n\nconst ATTRIBUTE_MAPPING = {\n  // HTML\n  accept: \"accept\",\n  acceptcharset: \"acceptCharset\",\n  \"accept-charset\": \"acceptCharset\",\n  accesskey: \"accessKey\",\n  action: \"action\",\n  allowfullscreen: \"allowFullScreen\",\n  alt: \"alt\",\n  as: \"as\",\n  async: \"async\",\n  autocapitalize: \"autoCapitalize\",\n  autocomplete: \"autoComplete\",\n  autocorrect: \"autoCorrect\",\n  autofocus: \"autoFocus\",\n  autoplay: \"autoPlay\",\n  autosave: \"autoSave\",\n  capture: \"capture\",\n  cellpadding: \"cellPadding\",\n  cellspacing: \"cellSpacing\",\n  challenge: \"challenge\",\n  charset: \"charSet\",\n  checked: \"checked\",\n  children: \"children\",\n  cite: \"cite\",\n  class: \"className\",\n  classid: \"classID\",\n  classname: \"className\",\n  cols: \"cols\",\n  colspan: \"colSpan\",\n  content: \"content\",\n  contenteditable: \"contentEditable\",\n  contextmenu: \"contextMenu\",\n  controls: \"controls\",\n  controlslist: \"controlsList\",\n  coords: \"coords\",\n  crossorigin: \"crossOrigin\",\n  dangerouslysetinnerhtml: \"dangerouslySetInnerHTML\",\n  data: \"data\",\n  datetime: \"dateTime\",\n  default: \"default\",\n  defaultchecked: \"defaultChecked\",\n  defaultvalue: \"defaultValue\",\n  defer: \"defer\",\n  dir: \"dir\",\n  disabled: \"disabled\",\n  download: \"download\",\n  draggable: \"draggable\",\n  enctype: \"encType\",\n  for: \"htmlFor\",\n  form: \"form\",\n  formmethod: \"formMethod\",\n  formaction: \"formAction\",\n  formenctype: \"formEncType\",\n  formnovalidate: \"formNoValidate\",\n  formtarget: \"formTarget\",\n  frameborder: \"frameBorder\",\n  headers: \"headers\",\n  height: \"height\",\n  hidden: \"hidden\",\n  high: \"high\",\n  href: \"href\",\n  hreflang: \"hrefLang\",\n  htmlfor: \"htmlFor\",\n  httpequiv: \"httpEquiv\",\n  \"http-equiv\": \"httpEquiv\",\n  icon: \"icon\",\n  id: \"id\",\n  innerhtml: \"innerHTML\",\n  inputmode: \"inputMode\",\n  integrity: \"integrity\",\n  is: \"is\",\n  itemid: \"itemID\",\n  itemprop: \"itemProp\",\n  itemref: \"itemRef\",\n  itemscope: \"itemScope\",\n  itemtype: \"itemType\",\n  keyparams: \"keyParams\",\n  keytype: \"keyType\",\n  kind: \"kind\",\n  label: \"label\",\n  lang: \"lang\",\n  list: \"list\",\n  loop: \"loop\",\n  low: \"low\",\n  manifest: \"manifest\",\n  marginwidth: \"marginWidth\",\n  marginheight: \"marginHeight\",\n  max: \"max\",\n  maxlength: \"maxLength\",\n  media: \"media\",\n  mediagroup: \"mediaGroup\",\n  method: \"method\",\n  min: \"min\",\n  minlength: \"minLength\",\n  multiple: \"multiple\",\n  muted: \"muted\",\n  name: \"name\",\n  nomodule: \"noModule\",\n  nonce: \"nonce\",\n  novalidate: \"noValidate\",\n  open: \"open\",\n  optimum: \"optimum\",\n  pattern: \"pattern\",\n  placeholder: \"placeholder\",\n  playsinline: \"playsInline\",\n  poster: \"poster\",\n  preload: \"preload\",\n  profile: \"profile\",\n  radiogroup: \"radioGroup\",\n  readonly: \"readOnly\",\n  referrerpolicy: \"referrerPolicy\",\n  rel: \"rel\",\n  required: \"required\",\n  reversed: \"reversed\",\n  role: \"role\",\n  rows: \"rows\",\n  rowspan: \"rowSpan\",\n  sandbox: \"sandbox\",\n  scope: \"scope\",\n  scoped: \"scoped\",\n  scrolling: \"scrolling\",\n  seamless: \"seamless\",\n  selected: \"selected\",\n  shape: \"shape\",\n  size: \"size\",\n  sizes: \"sizes\",\n  span: \"span\",\n  spellcheck: \"spellCheck\",\n  src: \"src\",\n  srcdoc: \"srcDoc\",\n  srclang: \"srcLang\",\n  srcset: \"srcSet\",\n  start: \"start\",\n  step: \"step\",\n  style: \"style\",\n  summary: \"summary\",\n  tabindex: \"tabIndex\",\n  target: \"target\",\n  title: \"title\",\n  type: \"type\",\n  usemap: \"useMap\",\n  value: \"value\",\n  width: \"width\",\n  wmode: \"wmode\",\n  wrap: \"wrap\",\n  // SVG\n  about: \"about\",\n  accentheight: \"accentHeight\",\n  \"accent-height\": \"accentHeight\",\n  accumulate: \"accumulate\",\n  additive: \"additive\",\n  alignmentbaseline: \"alignmentBaseline\",\n  \"alignment-baseline\": \"alignmentBaseline\",\n  allowreorder: \"allowReorder\",\n  alphabetic: \"alphabetic\",\n  amplitude: \"amplitude\",\n  arabicform: \"arabicForm\",\n  \"arabic-form\": \"arabicForm\",\n  ascent: \"ascent\",\n  attributename: \"attributeName\",\n  attributetype: \"attributeType\",\n  autoreverse: \"autoReverse\",\n  azimuth: \"azimuth\",\n  basefrequency: \"baseFrequency\",\n  baselineshift: \"baselineShift\",\n  \"baseline-shift\": \"baselineShift\",\n  baseprofile: \"baseProfile\",\n  bbox: \"bbox\",\n  begin: \"begin\",\n  bias: \"bias\",\n  by: \"by\",\n  calcmode: \"calcMode\",\n  capheight: \"capHeight\",\n  \"cap-height\": \"capHeight\",\n  clip: \"clip\",\n  clippath: \"clipPath\",\n  \"clip-path\": \"clipPath\",\n  clippathunits: \"clipPathUnits\",\n  cliprule: \"clipRule\",\n  \"clip-rule\": \"clipRule\",\n  color: \"color\",\n  colorinterpolation: \"colorInterpolation\",\n  \"color-interpolation\": \"colorInterpolation\",\n  colorinterpolationfilters: \"colorInterpolationFilters\",\n  \"color-interpolation-filters\": \"colorInterpolationFilters\",\n  colorprofile: \"colorProfile\",\n  \"color-profile\": \"colorProfile\",\n  colorrendering: \"colorRendering\",\n  \"color-rendering\": \"colorRendering\",\n  contentscripttype: \"contentScriptType\",\n  contentstyletype: \"contentStyleType\",\n  cursor: \"cursor\",\n  cx: \"cx\",\n  cy: \"cy\",\n  d: \"d\",\n  datatype: \"datatype\",\n  decelerate: \"decelerate\",\n  descent: \"descent\",\n  diffuseconstant: \"diffuseConstant\",\n  direction: \"direction\",\n  display: \"display\",\n  divisor: \"divisor\",\n  dominantbaseline: \"dominantBaseline\",\n  \"dominant-baseline\": \"dominantBaseline\",\n  dur: \"dur\",\n  dx: \"dx\",\n  dy: \"dy\",\n  edgemode: \"edgeMode\",\n  elevation: \"elevation\",\n  enablebackground: \"enableBackground\",\n  \"enable-background\": \"enableBackground\",\n  end: \"end\",\n  exponent: \"exponent\",\n  externalresourcesrequired: \"externalResourcesRequired\",\n  fill: \"fill\",\n  fillopacity: \"fillOpacity\",\n  \"fill-opacity\": \"fillOpacity\",\n  fillrule: \"fillRule\",\n  \"fill-rule\": \"fillRule\",\n  filter: \"filter\",\n  filterres: \"filterRes\",\n  filterunits: \"filterUnits\",\n  floodopacity: \"floodOpacity\",\n  \"flood-opacity\": \"floodOpacity\",\n  floodcolor: \"floodColor\",\n  \"flood-color\": \"floodColor\",\n  focusable: \"focusable\",\n  fontfamily: \"fontFamily\",\n  \"font-family\": \"fontFamily\",\n  fontsize: \"fontSize\",\n  \"font-size\": \"fontSize\",\n  fontsizeadjust: \"fontSizeAdjust\",\n  \"font-size-adjust\": \"fontSizeAdjust\",\n  fontstretch: \"fontStretch\",\n  \"font-stretch\": \"fontStretch\",\n  fontstyle: \"fontStyle\",\n  \"font-style\": \"fontStyle\",\n  fontvariant: \"fontVariant\",\n  \"font-variant\": \"fontVariant\",\n  fontweight: \"fontWeight\",\n  \"font-weight\": \"fontWeight\",\n  format: \"format\",\n  from: \"from\",\n  fx: \"fx\",\n  fy: \"fy\",\n  g1: \"g1\",\n  g2: \"g2\",\n  glyphname: \"glyphName\",\n  \"glyph-name\": \"glyphName\",\n  glyphorientationhorizontal: \"glyphOrientationHorizontal\",\n  \"glyph-orientation-horizontal\": \"glyphOrientationHorizontal\",\n  glyphorientationvertical: \"glyphOrientationVertical\",\n  \"glyph-orientation-vertical\": \"glyphOrientationVertical\",\n  glyphref: \"glyphRef\",\n  gradienttransform: \"gradientTransform\",\n  gradientunits: \"gradientUnits\",\n  hanging: \"hanging\",\n  horizadvx: \"horizAdvX\",\n  \"horiz-adv-x\": \"horizAdvX\",\n  horizoriginx: \"horizOriginX\",\n  \"horiz-origin-x\": \"horizOriginX\",\n  ideographic: \"ideographic\",\n  imagerendering: \"imageRendering\",\n  \"image-rendering\": \"imageRendering\",\n  in2: \"in2\",\n  in: \"in\",\n  inlist: \"inlist\",\n  intercept: \"intercept\",\n  k1: \"k1\",\n  k2: \"k2\",\n  k3: \"k3\",\n  k4: \"k4\",\n  k: \"k\",\n  kernelmatrix: \"kernelMatrix\",\n  kernelunitlength: \"kernelUnitLength\",\n  kerning: \"kerning\",\n  keypoints: \"keyPoints\",\n  keysplines: \"keySplines\",\n  keytimes: \"keyTimes\",\n  lengthadjust: \"lengthAdjust\",\n  letterspacing: \"letterSpacing\",\n  \"letter-spacing\": \"letterSpacing\",\n  lightingcolor: \"lightingColor\",\n  \"lighting-color\": \"lightingColor\",\n  limitingconeangle: \"limitingConeAngle\",\n  local: \"local\",\n  markerend: \"markerEnd\",\n  \"marker-end\": \"markerEnd\",\n  markerheight: \"markerHeight\",\n  markermid: \"markerMid\",\n  \"marker-mid\": \"markerMid\",\n  markerstart: \"markerStart\",\n  \"marker-start\": \"markerStart\",\n  markerunits: \"markerUnits\",\n  markerwidth: \"markerWidth\",\n  mask: \"mask\",\n  maskcontentunits: \"maskContentUnits\",\n  maskunits: \"maskUnits\",\n  mathematical: \"mathematical\",\n  mode: \"mode\",\n  numoctaves: \"numOctaves\",\n  offset: \"offset\",\n  opacity: \"opacity\",\n  operator: \"operator\",\n  order: \"order\",\n  orient: \"orient\",\n  orientation: \"orientation\",\n  origin: \"origin\",\n  overflow: \"overflow\",\n  overlineposition: \"overlinePosition\",\n  \"overline-position\": \"overlinePosition\",\n  overlinethickness: \"overlineThickness\",\n  \"overline-thickness\": \"overlineThickness\",\n  paintorder: \"paintOrder\",\n  \"paint-order\": \"paintOrder\",\n  panose1: \"panose1\",\n  \"panose-1\": \"panose1\",\n  pathlength: \"pathLength\",\n  patterncontentunits: \"patternContentUnits\",\n  patterntransform: \"patternTransform\",\n  patternunits: \"patternUnits\",\n  pointerevents: \"pointerEvents\",\n  \"pointer-events\": \"pointerEvents\",\n  points: \"points\",\n  pointsatx: \"pointsAtX\",\n  pointsaty: \"pointsAtY\",\n  pointsatz: \"pointsAtZ\",\n  prefix: \"prefix\",\n  preservealpha: \"preserveAlpha\",\n  preserveaspectratio: \"preserveAspectRatio\",\n  primitiveunits: \"primitiveUnits\",\n  property: \"property\",\n  r: \"r\",\n  radius: \"radius\",\n  refx: \"refX\",\n  refy: \"refY\",\n  renderingintent: \"renderingIntent\",\n  \"rendering-intent\": \"renderingIntent\",\n  repeatcount: \"repeatCount\",\n  repeatdur: \"repeatDur\",\n  requiredextensions: \"requiredExtensions\",\n  requiredfeatures: \"requiredFeatures\",\n  resource: \"resource\",\n  restart: \"restart\",\n  result: \"result\",\n  results: \"results\",\n  rotate: \"rotate\",\n  rx: \"rx\",\n  ry: \"ry\",\n  scale: \"scale\",\n  security: \"security\",\n  seed: \"seed\",\n  shaperendering: \"shapeRendering\",\n  \"shape-rendering\": \"shapeRendering\",\n  slope: \"slope\",\n  spacing: \"spacing\",\n  specularconstant: \"specularConstant\",\n  specularexponent: \"specularExponent\",\n  speed: \"speed\",\n  spreadmethod: \"spreadMethod\",\n  startoffset: \"startOffset\",\n  stddeviation: \"stdDeviation\",\n  stemh: \"stemh\",\n  stemv: \"stemv\",\n  stitchtiles: \"stitchTiles\",\n  stopcolor: \"stopColor\",\n  \"stop-color\": \"stopColor\",\n  stopopacity: \"stopOpacity\",\n  \"stop-opacity\": \"stopOpacity\",\n  strikethroughposition: \"strikethroughPosition\",\n  \"strikethrough-position\": \"strikethroughPosition\",\n  strikethroughthickness: \"strikethroughThickness\",\n  \"strikethrough-thickness\": \"strikethroughThickness\",\n  string: \"string\",\n  stroke: \"stroke\",\n  strokedasharray: \"strokeDasharray\",\n  \"stroke-dasharray\": \"strokeDasharray\",\n  strokedashoffset: \"strokeDashoffset\",\n  \"stroke-dashoffset\": \"strokeDashoffset\",\n  strokelinecap: \"strokeLinecap\",\n  \"stroke-linecap\": \"strokeLinecap\",\n  strokelinejoin: \"strokeLinejoin\",\n  \"stroke-linejoin\": \"strokeLinejoin\",\n  strokemiterlimit: \"strokeMiterlimit\",\n  \"stroke-miterlimit\": \"strokeMiterlimit\",\n  strokewidth: \"strokeWidth\",\n  \"stroke-width\": \"strokeWidth\",\n  strokeopacity: \"strokeOpacity\",\n  \"stroke-opacity\": \"strokeOpacity\",\n  suppresscontenteditablewarning: \"suppressContentEditableWarning\",\n  suppresshydrationwarning: \"suppressHydrationWarning\",\n  surfacescale: \"surfaceScale\",\n  systemlanguage: \"systemLanguage\",\n  tablevalues: \"tableValues\",\n  targetx: \"targetX\",\n  targety: \"targetY\",\n  textanchor: \"textAnchor\",\n  \"text-anchor\": \"textAnchor\",\n  textdecoration: \"textDecoration\",\n  \"text-decoration\": \"textDecoration\",\n  textlength: \"textLength\",\n  textrendering: \"textRendering\",\n  \"text-rendering\": \"textRendering\",\n  to: \"to\",\n  transform: \"transform\",\n  typeof: \"typeof\",\n  u1: \"u1\",\n  u2: \"u2\",\n  underlineposition: \"underlinePosition\",\n  \"underline-position\": \"underlinePosition\",\n  underlinethickness: \"underlineThickness\",\n  \"underline-thickness\": \"underlineThickness\",\n  unicode: \"unicode\",\n  unicodebidi: \"unicodeBidi\",\n  \"unicode-bidi\": \"unicodeBidi\",\n  unicoderange: \"unicodeRange\",\n  \"unicode-range\": \"unicodeRange\",\n  unitsperem: \"unitsPerEm\",\n  \"units-per-em\": \"unitsPerEm\",\n  unselectable: \"unselectable\",\n  valphabetic: \"vAlphabetic\",\n  \"v-alphabetic\": \"vAlphabetic\",\n  values: \"values\",\n  vectoreffect: \"vectorEffect\",\n  \"vector-effect\": \"vectorEffect\",\n  version: \"version\",\n  vertadvy: \"vertAdvY\",\n  \"vert-adv-y\": \"vertAdvY\",\n  vertoriginx: \"vertOriginX\",\n  \"vert-origin-x\": \"vertOriginX\",\n  vertoriginy: \"vertOriginY\",\n  \"vert-origin-y\": \"vertOriginY\",\n  vhanging: \"vHanging\",\n  \"v-hanging\": \"vHanging\",\n  videographic: \"vIdeographic\",\n  \"v-ideographic\": \"vIdeographic\",\n  viewbox: \"viewBox\",\n  viewtarget: \"viewTarget\",\n  visibility: \"visibility\",\n  vmathematical: \"vMathematical\",\n  \"v-mathematical\": \"vMathematical\",\n  vocab: \"vocab\",\n  widths: \"widths\",\n  wordspacing: \"wordSpacing\",\n  \"word-spacing\": \"wordSpacing\",\n  writingmode: \"writingMode\",\n  \"writing-mode\": \"writingMode\",\n  x1: \"x1\",\n  x2: \"x2\",\n  x: \"x\",\n  xchannelselector: \"xChannelSelector\",\n  xheight: \"xHeight\",\n  \"x-height\": \"xHeight\",\n  xlinkactuate: \"xlinkActuate\",\n  \"xlink:actuate\": \"xlinkActuate\",\n  xlinkarcrole: \"xlinkArcrole\",\n  \"xlink:arcrole\": \"xlinkArcrole\",\n  xlinkhref: \"xlinkHref\",\n  \"xlink:href\": \"xlinkHref\",\n  xlinkrole: \"xlinkRole\",\n  \"xlink:role\": \"xlinkRole\",\n  xlinkshow: \"xlinkShow\",\n  \"xlink:show\": \"xlinkShow\",\n  xlinktitle: \"xlinkTitle\",\n  \"xlink:title\": \"xlinkTitle\",\n  xlinktype: \"xlinkType\",\n  \"xlink:type\": \"xlinkType\",\n  xmlbase: \"xmlBase\",\n  \"xml:base\": \"xmlBase\",\n  xmllang: \"xmlLang\",\n  \"xml:lang\": \"xmlLang\",\n  xmlns: \"xmlns\",\n  \"xml:space\": \"xmlSpace\",\n  xmlnsxlink: \"xmlnsXlink\",\n  \"xmlns:xlink\": \"xmlnsXlink\",\n  xmlspace: \"xmlSpace\",\n  y1: \"y1\",\n  y2: \"y2\",\n  y: \"y\",\n  ychannelselector: \"yChannelSelector\",\n  z: \"z\",\n  zoomandpan: \"zoomAndPan\"\n};\nconst ELEMENT_ATTRIBUTE_MAPPING = {\n  input: {\n    checked: \"defaultChecked\",\n    value: \"defaultValue\",\n    maxlength: \"maxLength\"\n  },\n  form: {\n    enctype: \"encType\"\n  }\n};\nconst ELEMENT_TAG_NAME_MAPPING = {\n  a: \"a\",\n  altglyph: \"altGlyph\",\n  altglyphdef: \"altGlyphDef\",\n  altglyphitem: \"altGlyphItem\",\n  animate: \"animate\",\n  animatecolor: \"animateColor\",\n  animatemotion: \"animateMotion\",\n  animatetransform: \"animateTransform\",\n  audio: \"audio\",\n  canvas: \"canvas\",\n  circle: \"circle\",\n  clippath: \"clipPath\",\n  \"color-profile\": \"colorProfile\",\n  cursor: \"cursor\",\n  defs: \"defs\",\n  desc: \"desc\",\n  discard: \"discard\",\n  ellipse: \"ellipse\",\n  feblend: \"feBlend\",\n  fecolormatrix: \"feColorMatrix\",\n  fecomponenttransfer: \"feComponentTransfer\",\n  fecomposite: \"feComposite\",\n  feconvolvematrix: \"feConvolveMatrix\",\n  fediffuselighting: \"feDiffuseLighting\",\n  fedisplacementmap: \"feDisplacementMap\",\n  fedistantlight: \"feDistantLight\",\n  fedropshadow: \"feDropShadow\",\n  feflood: \"feFlood\",\n  fefunca: \"feFuncA\",\n  fefuncb: \"feFuncB\",\n  fefuncg: \"feFuncG\",\n  fefuncr: \"feFuncR\",\n  fegaussianblur: \"feGaussianBlur\",\n  feimage: \"feImage\",\n  femerge: \"feMerge\",\n  femergenode: \"feMergeNode\",\n  femorphology: \"feMorphology\",\n  feoffset: \"feOffset\",\n  fepointlight: \"fePointLight\",\n  fespecularlighting: \"feSpecularLighting\",\n  fespotlight: \"feSpotLight\",\n  fetile: \"feTile\",\n  feturbulence: \"feTurbulence\",\n  filter: \"filter\",\n  font: \"font\",\n  \"font-face\": \"fontFace\",\n  \"font-face-format\": \"fontFaceFormat\",\n  \"font-face-name\": \"fontFaceName\",\n  \"font-face-src\": \"fontFaceSrc\",\n  \"font-face-uri\": \"fontFaceUri\",\n  foreignobject: \"foreignObject\",\n  g: \"g\",\n  glyph: \"glyph\",\n  glyphref: \"glyphRef\",\n  hatch: \"hatch\",\n  hatchpath: \"hatchpath\",\n  hkern: \"hkern\",\n  iframe: \"iframe\",\n  image: \"image\",\n  line: \"line\",\n  lineargradient: \"linearGradient\",\n  marker: \"marker\",\n  mask: \"mask\",\n  mesh: \"mesh\",\n  meshgradient: \"meshgradient\",\n  meshpatch: \"meshpatch\",\n  meshrow: \"meshrow\",\n  metadata: \"metadata\",\n  \"missing-glyph\": \"missingGlyph\",\n  mpath: \"mpath\",\n  path: \"path\",\n  pattern: \"pattern\",\n  polygon: \"polygon\",\n  polyline: \"polyline\",\n  radialgradient: \"radialGradient\",\n  rect: \"rect\",\n  script: \"script\",\n  set: \"set\",\n  solidcolor: \"solidcolor\",\n  stop: \"stop\",\n  style: \"style\",\n  svg: \"svg\",\n  switch: \"switch\",\n  symbol: \"symbol\",\n  text: \"text\",\n  textpath: \"textPath\",\n  title: \"title\",\n  tref: \"tref\",\n  tspan: \"tspan\",\n  unknown: \"unknown\",\n  use: \"use\",\n  video: \"video\",\n  view: \"view\",\n  vkern: \"vkern\"\n};\n\nconst convertAriaAttribute = (kebabKey) => {\n  const [aria, ...parts] = kebabKey.split(\"-\");\n  return `${aria}-${parts.join(\"\").toLowerCase()}`;\n};\nconst getKey = (key, node) => {\n  const lowerCaseKey = key.toLowerCase();\n  const mappedElementAttribute = (\n    // @ts-ignore\n    ELEMENT_ATTRIBUTE_MAPPING[node.name] && // @ts-ignore\n    ELEMENT_ATTRIBUTE_MAPPING[node.name][lowerCaseKey]\n  );\n  const mappedAttribute = ATTRIBUTE_MAPPING[lowerCaseKey];\n  if (mappedElementAttribute || mappedAttribute) {\n    return t__namespace.jsxIdentifier(mappedElementAttribute || mappedAttribute);\n  }\n  const kebabKey = kebabCase(key);\n  if (kebabKey.startsWith(\"aria-\")) {\n    return t__namespace.jsxIdentifier(convertAriaAttribute(kebabKey));\n  }\n  if (kebabKey.startsWith(\"data-\")) {\n    return t__namespace.jsxIdentifier(kebabKey);\n  }\n  return t__namespace.jsxIdentifier(key);\n};\nconst getValue = (key, value) => {\n  if (Array.isArray(value)) {\n    return t__namespace.stringLiteral(replaceSpaces(value.join(\" \")));\n  }\n  if (key === \"style\") {\n    return t__namespace.jsxExpressionContainer(stringToObjectStyle(value));\n  }\n  if (typeof value === \"number\" || isNumeric(value)) {\n    return t__namespace.jsxExpressionContainer(t__namespace.numericLiteral(Number(value)));\n  }\n  return t__namespace.stringLiteral(replaceSpaces(value));\n};\nconst getAttributes = (node) => {\n  if (!node.properties)\n    return [];\n  const keys = Object.keys(node.properties);\n  const attributes = [];\n  let index = -1;\n  while (++index < keys.length) {\n    const key = keys[index];\n    const value = node.properties[key];\n    const attribute = t__namespace.jsxAttribute(getKey(key, node), getValue(key, value));\n    attributes.push(attribute);\n  }\n  return attributes;\n};\n\nconst root = (h, node) => (\n  // @ts-ignore\n  t__namespace.program(all(h, node))\n);\nconst comment = (_, node, parent) => {\n  if (parent.type === \"root\" || !node.value)\n    return null;\n  const expression = t__namespace.jsxEmptyExpression();\n  t__namespace.addComment(expression, \"inner\", node.value);\n  return t__namespace.jsxExpressionContainer(expression);\n};\nconst SPACE_REGEX = /^\\s+$/;\nconst text = (h, node, parent) => {\n  if (parent.type === \"root\")\n    return null;\n  if (typeof node.value === \"string\" && SPACE_REGEX.test(node.value))\n    return null;\n  return t__namespace.jsxExpressionContainer(\n    t__namespace.stringLiteral(entities.decodeXML(String(node.value)))\n  );\n};\nconst element = (h, node, parent) => {\n  if (!node.tagName)\n    return null;\n  const children = all(h, node);\n  const selfClosing = children.length === 0;\n  const name = ELEMENT_TAG_NAME_MAPPING[node.tagName] || node.tagName;\n  const openingElement = t__namespace.jsxOpeningElement(\n    t__namespace.jsxIdentifier(name),\n    getAttributes(node),\n    selfClosing\n  );\n  const closingElement = !selfClosing ? t__namespace.jsxClosingElement(t__namespace.jsxIdentifier(name)) : null;\n  const jsxElement = t__namespace.jsxElement(openingElement, closingElement, children);\n  if (parent.type === \"root\") {\n    return t__namespace.expressionStatement(jsxElement);\n  }\n  return jsxElement;\n};\n\nvar handlers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  comment: comment,\n  element: element,\n  root: root,\n  text: text\n});\n\nconst helpers = { handlers };\n\nconst toBabelAST = (tree) => root(helpers, tree);\n\nmodule.exports = toBabelAST;\n//# sourceMappingURL=index.js.map\n",
    "package.json": "{\n  \"name\": \"@svgr/hast-util-to-babel-ast\",\n  \"description\": \"Transform HAST to Babel AST (JSX)\",\n  \"version\": \"8.0.0\",\n  \"main\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"repository\": \"https://github.com/gregberge/svgr/tree/main/packages/hast-util-to-babel-ast\",\n  \"author\": \"Greg Bergé <berge.greg@gmail.com>\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"keywords\": [\n    \"html\",\n    \"hast\",\n    \"babel\",\n    \"hast-util\",\n    \"unist-util\",\n    \"unist\"\n  ],\n  \"engines\": {\n    \"node\": \">=14\"\n  },\n  \"homepage\": \"https://react-svgr.com\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/gregberge\"\n  },\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@babel/types\": \"^7.21.3\",\n    \"entities\": \"^4.4.0\"\n  },\n  \"scripts\": {\n    \"reset\": \"rm -rf dist\",\n    \"build\": \"rollup -c ../../build/rollup.config.mjs\",\n    \"prepublishOnly\": \"npm run reset && npm run build\"\n  },\n  \"devDependencies\": {\n    \"@types/svg-parser\": \"^2.0.3\"\n  },\n  \"gitHead\": \"52a1079681477587ef0d842c0e78531adf2d2520\"\n}\n"
  },
  "externals": [
    "@babel/types",
    "entities"
  ]
}
