{
  "packageName": "@svgr/core",
  "packageVersion": "8.1.0",
  "request": "@svgr/core",
  "resolved": "dist/index.js",
  "files": {
    "dist/index.js": "'use strict';\n\nvar path = require('path');\nvar camelCase = require('camelcase');\nvar cosmiconfig = require('cosmiconfig');\n\nvar __defProp$1 = Object.defineProperty;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$1.call(b, prop))\n      __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b)) {\n      if (__propIsEnum$1.call(b, prop))\n        __defNormalProp$1(a, prop, b[prop]);\n    }\n  return a;\n};\nconst VALID_CHAR_REGEX = /[^a-zA-Z0-9 _-]/g;\nconst getComponentName = (filePath) => {\n  if (!filePath)\n    return \"SvgComponent\";\n  const pascalCaseFileName = camelCase(\n    path.parse(filePath).name.replace(VALID_CHAR_REGEX, \"\"),\n    {\n      pascalCase: true\n    }\n  );\n  return `Svg${pascalCaseFileName}`;\n};\nconst expandState = (state) => {\n  return __spreadValues$1({\n    componentName: state.componentName || getComponentName(state.filePath)\n  }, state);\n};\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nconst DEFAULT_CONFIG = {\n  dimensions: true,\n  expandProps: \"end\",\n  icon: false,\n  native: false,\n  typescript: false,\n  prettier: true,\n  prettierConfig: void 0,\n  memo: false,\n  ref: false,\n  replaceAttrValues: void 0,\n  svgProps: void 0,\n  svgo: true,\n  svgoConfig: void 0,\n  template: void 0,\n  index: false,\n  titleProp: false,\n  descProp: false,\n  runtimeConfig: true,\n  namedExport: \"ReactComponent\",\n  exportType: \"default\"\n};\nconst explorer = cosmiconfig.cosmiconfig(\"svgr\");\nconst explorerSync = cosmiconfig.cosmiconfigSync(\"svgr\");\nconst resolveConfig = async (searchFrom, configFile) => {\n  if (configFile == null) {\n    const result2 = await explorer.search(searchFrom);\n    return result2 ? result2.config : null;\n  }\n  const result = await explorer.load(configFile);\n  return result ? result.config : null;\n};\nresolveConfig.sync = (searchFrom, configFile) => {\n  if (configFile == null) {\n    const result2 = explorerSync.search(searchFrom);\n    return result2 ? result2.config : null;\n  }\n  const result = explorerSync.load(configFile);\n  return result ? result.config : null;\n};\nconst resolveConfigFile = async (filePath) => {\n  const result = await explorer.search(filePath);\n  return result ? result.filepath : null;\n};\nresolveConfigFile.sync = (filePath) => {\n  const result = explorerSync.search(filePath);\n  return result ? result.filepath : null;\n};\nconst loadConfig = async (_a, state = {}) => {\n  var _b = _a, { configFile } = _b, baseConfig = __objRest(_b, [\"configFile\"]);\n  const rcConfig = state.filePath && baseConfig.runtimeConfig !== false ? await resolveConfig(state.filePath, configFile) : {};\n  return __spreadValues(__spreadValues(__spreadValues({}, DEFAULT_CONFIG), baseConfig), rcConfig);\n};\nloadConfig.sync = (_c, state = {}) => {\n  var _d = _c, { configFile } = _d, baseConfig = __objRest(_d, [\"configFile\"]);\n  const rcConfig = state.filePath && baseConfig.runtimeConfig !== false ? resolveConfig.sync(state.filePath, configFile) : {};\n  return __spreadValues(__spreadValues(__spreadValues({}, DEFAULT_CONFIG), baseConfig), rcConfig);\n};\n\nconst DEFAULT_PLUGINS = [];\nconst getPlugins = (config, state) => {\n  var _a;\n  if (config.plugins) {\n    return config.plugins;\n  }\n  if ((_a = state.caller) == null ? void 0 : _a.defaultPlugins) {\n    return state.caller.defaultPlugins;\n  }\n  return DEFAULT_PLUGINS;\n};\nconst resolvePlugin = (plugin) => {\n  if (typeof plugin === \"function\") {\n    return plugin;\n  }\n  if (typeof plugin === \"string\") {\n    return loadPlugin(plugin);\n  }\n  throw new Error(`Invalid plugin \"${plugin}\"`);\n};\nconst pluginCache = {};\nconst resolveModule = (m) => m ? m.default || m : null;\nconst loadPlugin = (moduleName) => {\n  if (pluginCache[moduleName]) {\n    return pluginCache[moduleName];\n  }\n  try {\n    const plugin = resolveModule(require(moduleName));\n    if (!plugin) {\n      throw new Error(`Invalid plugin \"${moduleName}\"`);\n    }\n    pluginCache[moduleName] = plugin;\n    return pluginCache[moduleName];\n  } catch (error) {\n    console.log(error);\n    throw new Error(\n      `Module \"${moduleName}\" missing. Maybe \\`npm install ${moduleName}\\` could help!`\n    );\n  }\n};\n\nconst run = (code, config, state) => {\n  const expandedState = expandState(state);\n  const plugins = getPlugins(config, state).map(resolvePlugin);\n  let nextCode = String(code).replace(\"\\0\", \"\");\n  for (const plugin of plugins) {\n    nextCode = plugin(nextCode, config, expandedState);\n  }\n  return nextCode;\n};\nconst transform = async (code, config = {}, state = {}) => {\n  config = await loadConfig(config, state);\n  return run(code, config, state);\n};\ntransform.sync = (code, config = {}, state = {}) => {\n  config = loadConfig.sync(config, state);\n  return run(code, config, state);\n};\n\nexports.DEFAULT_CONFIG = DEFAULT_CONFIG;\nexports.loadConfig = loadConfig;\nexports.resolveConfig = resolveConfig;\nexports.resolveConfigFile = resolveConfigFile;\nexports.transform = transform;\n//# sourceMappingURL=index.js.map\n",
    "package.json": "{\n  \"name\": \"@svgr/core\",\n  \"description\": \"Transform SVG into React Components.\",\n  \"version\": \"8.1.0\",\n  \"main\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"repository\": \"https://github.com/gregberge/svgr/tree/main/packages/core\",\n  \"author\": \"Greg Berg√© <berge.greg@gmail.com>\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"keywords\": [\n    \"svgr\",\n    \"svg\",\n    \"react\",\n    \"core\",\n    \"api\"\n  ],\n  \"engines\": {\n    \"node\": \">=14\"\n  },\n  \"homepage\": \"https://react-svgr.com\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/gregberge\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"reset\": \"rm -rf dist\",\n    \"build\": \"rollup -c ../../build/rollup.config.mjs\",\n    \"prepublishOnly\": \"npm run reset && npm run build\"\n  },\n  \"dependencies\": {\n    \"@babel/core\": \"^7.21.3\",\n    \"@svgr/babel-preset\": \"8.1.0\",\n    \"camelcase\": \"^6.2.0\",\n    \"cosmiconfig\": \"^8.1.3\",\n    \"snake-case\": \"^3.0.4\"\n  },\n  \"devDependencies\": {\n    \"svgo\": \"^3.0.2\"\n  },\n  \"gitHead\": \"772592e042be5063e782bfb8711d024b2fefc6b8\"\n}\n"
  },
  "externals": [
    "path",
    "camelcase",
    "cosmiconfig"
  ]
}
