{
  "packageName": "once",
  "packageVersion": "1.4.0",
  "request": "once",
  "resolved": "once.js",
  "files": {
    "once.js": "var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n",
    "package.json": "{\n  \"name\": \"once\",\n  \"version\": \"1.4.0\",\n  \"description\": \"Run a function exactly one time\",\n  \"main\": \"once.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"dependencies\": {\n    \"wrappy\": \"1\"\n  },\n  \"devDependencies\": {\n    \"tap\": \"^7.0.1\"\n  },\n  \"scripts\": {\n    \"test\": \"tap test/*.js\"\n  },\n  \"files\": [\n    \"once.js\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/isaacs/once\"\n  },\n  \"keywords\": [\n    \"once\",\n    \"function\",\n    \"one\",\n    \"single\"\n  ],\n  \"author\": \"Isaac Z. Schlueter <i@izs.me> (http://blog.izs.me/)\",\n  \"license\": \"ISC\"\n}\n"
  },
  "externals": [
    "wrappy"
  ]
}
