{
  "packageName": "@svgr/plugin-jsx",
  "packageVersion": "8.1.0",
  "request": "@svgr/plugin-jsx",
  "resolved": "dist/index.js",
  "files": {
    "dist/index.js": "'use strict';\n\nvar svgParser = require('svg-parser');\nvar hastToBabelAst = require('@svgr/hast-util-to-babel-ast');\nvar core = require('@babel/core');\nvar svgrBabelPreset = require('@svgr/babel-preset');\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst getJsxRuntimeOptions = (config) => {\n  if (config.jsxRuntimeImport) {\n    return {\n      importSource: config.jsxRuntimeImport.source,\n      jsxRuntimeImport: config.jsxRuntimeImport\n    };\n  }\n  switch (config.jsxRuntime) {\n    case null:\n    case void 0:\n    case \"classic\":\n      return {\n        jsxRuntime: \"classic\",\n        importSource: \"react\",\n        jsxRuntimeImport: { namespace: \"React\", source: \"react\" }\n      };\n    case \"classic-preact\":\n      return {\n        jsxRuntime: \"classic\",\n        importSource: \"preact/compat\",\n        jsxRuntimeImport: { specifiers: [\"h\"], source: \"preact\" }\n      };\n    case \"automatic\":\n      return { jsxRuntime: \"automatic\" };\n    default:\n      throw new Error(`Unsupported \"jsxRuntime\" \"${config.jsxRuntime}\"`);\n  }\n};\nconst jsxPlugin = (code, config, state) => {\n  const filePath = state.filePath || \"unknown\";\n  const hastTree = svgParser.parse(code);\n  const babelTree = hastToBabelAst(hastTree);\n  const svgPresetOptions = __spreadProps(__spreadValues({\n    ref: config.ref,\n    titleProp: config.titleProp,\n    descProp: config.descProp,\n    expandProps: config.expandProps,\n    dimensions: config.dimensions,\n    icon: config.icon,\n    native: config.native,\n    svgProps: config.svgProps,\n    replaceAttrValues: config.replaceAttrValues,\n    typescript: config.typescript,\n    template: config.template,\n    memo: config.memo,\n    exportType: config.exportType,\n    namedExport: config.namedExport\n  }, getJsxRuntimeOptions(config)), {\n    state\n  });\n  const result = core.transformFromAstSync(babelTree, code, __spreadValues({\n    caller: {\n      name: \"svgr\"\n    },\n    presets: [\n      core.createConfigItem([svgrBabelPreset, svgPresetOptions], {\n        type: \"preset\"\n      })\n    ],\n    filename: filePath,\n    babelrc: false,\n    configFile: false,\n    code: true,\n    ast: false,\n    // @ts-ignore\n    inputSourceMap: false\n  }, config.jsx && config.jsx.babelConfig));\n  if (!(result == null ? void 0 : result.code)) {\n    throw new Error(`Unable to generate SVG file`);\n  }\n  return result.code;\n};\n\nmodule.exports = jsxPlugin;\n//# sourceMappingURL=index.js.map\n",
    "package.json": "{\n  \"name\": \"@svgr/plugin-jsx\",\n  \"description\": \"Transform SVG into JSX\",\n  \"version\": \"8.1.0\",\n  \"main\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"repository\": \"https://github.com/gregberge/svgr/tree/main/packages/plugin-jsx\",\n  \"author\": \"Greg Berg√© <berge.greg@gmail.com>\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"keywords\": [\n    \"svgr-plugin\"\n  ],\n  \"engines\": {\n    \"node\": \">=14\"\n  },\n  \"homepage\": \"https://react-svgr.com\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/gregberge\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"reset\": \"rm -rf dist\",\n    \"build\": \"rollup -c ../../build/rollup.config.mjs\",\n    \"prepublishOnly\": \"pnpm run reset && pnpm run build\"\n  },\n  \"dependencies\": {\n    \"@babel/core\": \"^7.21.3\",\n    \"@svgr/babel-preset\": \"8.1.0\",\n    \"@svgr/hast-util-to-babel-ast\": \"8.0.0\",\n    \"svg-parser\": \"^2.0.4\"\n  },\n  \"devDependencies\": {\n    \"@svgr/core\": \"8.1.0\",\n    \"@types/svg-parser\": \"^2.0.3\"\n  },\n  \"peerDependencies\": {\n    \"@svgr/core\": \"*\"\n  },\n  \"gitHead\": \"772592e042be5063e782bfb8711d024b2fefc6b8\"\n}\n"
  },
  "externals": [
    "svg-parser",
    "@svgr/hast-util-to-babel-ast",
    "@babel/core",
    "@svgr/babel-preset"
  ]
}
